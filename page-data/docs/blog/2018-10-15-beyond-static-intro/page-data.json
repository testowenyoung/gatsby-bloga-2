{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2018-10-15-beyond-static-intro/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"bf9e77d3-d957-503c-8718-80c72e133228","excerpt":"We hear it regularly. Gatsby is for static sites, Next.js (or similar) is for when your data changes regularly and/or you need an ‚Äúapp.‚Äù This raises a question‚Ä¶","html":"<p>We hear it regularly. Gatsby is for static sites, Next.js (or similar) is for when your data changes regularly and/or you need an ‚Äúapp.‚Äù This raises a question‚Ä¶ what actually <em>is</em> an app?</p>\n<p>If this question interests you, consider attending <a href=\"https://www.gatsbyjs.com/build-web-apps-webinar\">the upcoming webinar</a> where we‚Äôll focus on shedding some light on this very question as well as talk about how to build dynamic web apps with Gatsby.</p>\n<p>Until then, I‚Äôd like to offer some brief teasers of some of the content we‚Äôll be discussing during the webinar and some introductory information in <em>how</em> Gatsby enables app development.</p>\n<blockquote>\n<p>My first impression of Gatsby is that it is more of a static site generator which I interpret as being aimed at content or marketing websites and not as focused on web apps. That is a complete assumption so please correct me if I am wrong.</p>\n<ul>\n<li><a href=\"https://www.reddit.com/r/reactjs/comments/992n2r/next_vs_gatsby/?st=jn6cojmr&#x26;sh=1a53fac1\">Triptcip</a></li>\n</ul>\n</blockquote>\n<h2>What is an app?</h2>\n<p>It‚Äôs surprisingly challenging to define what separates an app from a static site.</p>\n<ul>\n<li>Authentication?</li>\n<li>Reacting to remote data changes?</li>\n<li>A shopping cart?</li>\n</ul>\n<p>It‚Äôs surprisingly murky where that line is drawn and why exactly many seem to clearly delineate the two <em>separate</em> concepts.</p>\n<p>In fact, I contend that the line between these two concepts is extremely blurry. There isn‚Äôt some magic percentage threshold that, when crossed, indicates that a static site is now an application. Nor is the inverse true, that an ‚Äúapp‚Äù is somehow static because some percentage of its content never or rarely changes.</p>\n<p>From this perspective, it‚Äôs fair to consider dynamic content as the key determinant between static sites and apps. The more dynamic content an application has, the more app-like that application feels. From this basis, Gatsby is an excellent choice because it enables dynamic functionality just as easily as it enables static site generation.</p>\n<h2>How does Gatsby enable app functionality?</h2>\n<p>Gatsby is great for static sites and for truly maximizing performance, while also maintaining a great developer experience and enabling fast feature development with tools developers actually <em>want</em> to use. React, GraphQL, headless CMSes, and the list goes on and on. We enable these, and more, in an easy-to-use package that gets blazing-fast performance, by <em>default</em>. It‚Äôs possible you‚Äôve heard us talk about these things before üòÖ We‚Äôve honed in on this message and initially focused on this core functionality of building static sites. However, that‚Äôs only one side of the coin. Gatsby‚Äôs flexibility and one of its <strong>core</strong> ideas enable building apps on top of this solid static base.</p>\n<h3>Hydration</h3>\n<p>One of the central ideas of Gatsby is that we statically generate our HTML content‚Äîusing React DOM server-side APIs. A less-often illustrated feature is that this static HTML content can then be <em>enhanced</em> with client-side JavaScript via React hydration. The general approach is as follows:</p>\n<ol>\n<li>Build and render static HTML, creating content and pages with data injected at build time</li>\n<li>Invoke <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">ReactDOM.hydrate method</a> to pick up just where we left our static HTML</li>\n<li>Transfer rendering to the <a href=\"https://reactjs.org/docs/reconciliation.html\">React reconciler</a></li>\n</ol>\n<p><em>This process is spelled out in more detail in the <a href=\"/gatsby-bloga-2/docs/react-hydration\">‚ÄúUnderstanding React Hydration‚Äù guide</a></em></p>\n<p>It‚Äôs this last phase that bridges the gap between static sites and full-fledged applications. In this phase you can make data calls, authenticate users, and perform all the app-like functionality you desire.</p>\n<p>It‚Äôs really that easy.</p>\n<h2>Use cases</h2>\n<p>Gatsby enables these hooks to deliver app-like functionality, just as it does for static site generation. However, it‚Äôs not as clear when it makes sense to reach for something purely server rendered (Next.js, Nuxt, etc.) or a hybrid approach, like we offer in Gatsby. In the webinar, I‚Äôll go over a number of examples of various types of web apps, including e-commerce apps, apps which utilize authentication, and apps that connect to a remote data source (e.g. a GraphQL API), among others! You‚Äôll leave having a clear mental model of the types of apps that <strong>you</strong> can build with Gatsby.</p>\n<h2>Wrap Up</h2>\n<p>If these briefly described topics and use cases sound interesting to you then please consider <a href=\"https://www.gatsbyjs.com/build-web-apps-webinar\">signing up for the Webinar</a>. I can‚Äôt wait to share some practical advice, excellent tooling, and a live demo to show you how you can #BuildWithGatsby in more ways than <em>just</em> static. I hope to see you there!</p>","frontmatter":{"title":"Beyond Static: Building Dynamic Apps with Gatsby","date":"October 15, 2018","description":null}}},"pageContext":{"slug":"/docs/blog/2018-10-15-beyond-static-intro/","previous":{"fields":{"slug":"/docs/blog/2018-10-12-uptick-docs-contributions-hacktoberfest/"},"frontmatter":{"title":"Uptick in docs contributions for Gatsby Hacktoberfest"}},"next":{"fields":{"slug":"/docs/blog/2018-10-16-why-mobile-performance-is-crucial/"},"frontmatter":{"title":"Journey to the Content Mesh Part 4: Why Mobile Performance Is Crucial"}}}}}