{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-05-17-improvements-to-schema-customization/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"2c55fa7e-fdb4-5e51-afdb-3a096bd9978d","excerpt":"Today we are releasing further improvements to the schema customization that we’ve released in version 2.2.0. You can use them with Gatsby 2.5.0. It is now…","html":"<p>Today we are releasing further improvements to the schema customization that <a href=\"/gatsby-bloga-2/blog/2019-03-18-releasing-new-schema-customization\">we’ve released in version 2.2.0</a>. You can use them with Gatsby 2.5.0.</p>\n<p>It is now possible to indicate to Gatsby, that you want to add a resolver to an explicitly defined fields. Use extensions like <code class=\"language-text\">@link</code> and <code class=\"language-text\">@dateformat</code> to add default arguments or/and resolvers to fields. In addition, when <code class=\"language-text\">@dontInfer</code> is set, Gatsby will no longer run inference for marked type, allowing one to improve performance for large data sets.</p>\n<h2>Summary</h2>\n<p>After about a month of testing schema customization both pre and post release, we determined a couple of issues. The original aim of our schema customization work was to remove uncertainty in a user’s schemas when their data changes.</p>\n<p>However, the original design allowed some uncertainties to still creep in. In addition, it made inference a heavier process, trading performance for consistency without providing a way to opt-out completely. To summarize, the schema customization work released in Gatsby 2.2.0 suffered from a few non-ideal issues:</p>\n<ul>\n<li>Resolvers and arguments of fields like Date and File was determined by inferred data</li>\n<li>There was no easy way to use arguments/resolvers to override the above</li>\n<li>Inference was run even when <code class=\"language-text\">@dontInfer</code> flag was on</li>\n<li>There was no way to control inference outside of SDL, e.g. in Type Builders</li>\n</ul>\n<p>Therefore we are excited to announce some changes in how we perform inference. In addition, we are deprecating some of the features introduced in 2.2.0 and will remove them in Gatsby v3.</p>\n<h2>Changes in Gatsby 2.5.0</h2>\n<h3><code class=\"language-text\">noDefaultResolvers</code> and inference modes</h3>\n<p>First of all, we are deprecating <code class=\"language-text\">noDefaultResolvers</code>. It was an argument of <code class=\"language-text\">infer</code> and <code class=\"language-text\">dontInfer</code>. We feel it was confusing and in some cases it didn’t even actually add resolvers :). We will support <code class=\"language-text\">noDefaultResolvers</code> until version 3, after which <code class=\"language-text\">@infer</code> behavior (see below) will become a default and <code class=\"language-text\">noDefaultResolvers</code> will be removed.</p>\n<p>We didn’t want to break things, so we keep old default behavior, even though we think it’s not optimal. Add explicit <code class=\"language-text\">@infer</code> and resolver extensions (like <code class=\"language-text\">@link</code>) to fields to be future proof.</p>\n<h4>Default (deprecated, removed in v3)</h4>\n<p>Applies with no <code class=\"language-text\">@infer</code> and no <code class=\"language-text\">@dontInfer</code> on a type. Equals to <code class=\"language-text\">@infer(noDefaultResolvers: false)</code>.</p>\n<p>Type gets all inferred fields added. If type has defined fields of types <code class=\"language-text\">Date</code>, <code class=\"language-text\">File</code> and any other node, and we inferred that they should have resolver options, resolver options will be added to type with a warning.</p>\n<h4>Strict inference (future default in v3)</h4>\n<p>Applies with <code class=\"language-text\">@infer</code> or <code class=\"language-text\">@infer(noDefaultResolvers: true)</code>.</p>\n<p>Type gets all inferred fields added. Existing fields won’t automatically get resolvers (use the provided resolver extensions).</p>\n<h4>No inference</h4>\n<p>Applies with <code class=\"language-text\">@dontInfer</code> or <code class=\"language-text\">@dontInfer(noDefaultResolvers: true)</code>.</p>\n<p>Inference won’t run at all. Existing fields won’t automatically get resolvers (use resolver extensions).</p>\n<h4>No new fields with default resolvers (deprecated, removed in v3)</h4>\n<p>Applies with <code class=\"language-text\">@dontInfer(noDefaultResolvers: false)</code></p>\n<p>Inference will run, but fields won’t be added. If a type has defined fields of types <code class=\"language-text\">Date</code>, <code class=\"language-text\">File</code>, and any other node, and we inferred that they should have resolvers/args. These will still be added in Gatsby v2, but we will now warn and note the deprecation.</p>\n<h3>Migrating your code</h3>\n<p>Here are suggested changes to your code if you are using schema customization already. Your code will work in Gatsby 2.5.0, but those changes will ensure it stays compatible with Gatsby 3.0</p>\n<ol>\n<li>Add resolver directives to fields</li>\n<li>Add <code class=\"language-text\">@infer</code> or <code class=\"language-text\">@dontInfer</code> to your type if you don’t have it already</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=gatsby-node.js\"><pre class=\"language-javascript:title=gatsby-node.js\"><code class=\"language-javascript:title=gatsby-node.js\">exports.sourceNodes = function sourceNodes({ actions }) {\n  const { createTypes } = actions\n\n  createTypes(`\n    type MyType {\n      date: Date\n      image: File\n      authorByEmail: AuthorJson\n    }\n  `)\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=gatsby-node.js\"><pre class=\"language-javascript:title=gatsby-node.js\"><code class=\"language-javascript:title=gatsby-node.js\">exports.sourceNodes = function sourceNodes({ actions }) {\n  const { createTypes } = actions\n\n  createTypes(`\n    type MyType @infer {\n      date: Date @dateformat\n      image: File @fileByRelativePath\n      authorByEmail: Author @link\n    }\n  `)\n}</code></pre></div>\n<h3>Resolver extensions</h3>\n<p>Add resolver and resolver options (such as arguments) to the given field. There are currently 3 extensions available.</p>\n<ul>\n<li><code class=\"language-text\">@dateformat</code> - add date formatting arguments. Accepts <code class=\"language-text\">formatString</code> and\n<code class=\"language-text\">locale</code> options that sets the defaults for this field</li>\n<li><code class=\"language-text\">@link</code> - connect to a different Node. Arguments <code class=\"language-text\">by</code> and <code class=\"language-text\">from</code>, which\ndefine which field to compare to on a remote node and which field to use on\nthe source node</li>\n<li><code class=\"language-text\">@fileByRelativePath</code> - connect to a File node. Same arguments. The\ndifference from link is that this normalizes the relative path to be\nrelative from the path where source node is found.</li>\n<li><code class=\"language-text\">proxy</code> - in case the underlying node data contains field names with\ncharacters that are invalid in GraphQL, <code class=\"language-text\">proxy</code> allows to explicitly\nproxy those properties to fields with valid field names. Takes a <code class=\"language-text\">from</code> arg.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=gatsby-node.js\"><pre class=\"language-javascript:title=gatsby-node.js\"><code class=\"language-javascript:title=gatsby-node.js\">exports.sourceNodes = function sourceNodes({ actions }) {\n  const { createTypes } = actions\n\n  createTypes(`\n    type MyType @infer {\n      date: Date @dateformat(formatString: &quot;DD MMM&quot;, locale: &quot;fi&quot;)\n      image: File @fileByRelativePath\n      authorByEmail: Author @link(by: &quot;email&quot;)\n    }\n  `)\n}</code></pre></div>\n<h3>Type Builders and extensions</h3>\n<p>You can now apply configuration to type builder types through an exposed <code class=\"language-text\">extensions</code> property.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">schema<span class=\"token punctuation\">.</span><span class=\"token function\">buildObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> MyType<span class=\"token punctuation\">,</span>\n  extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    infer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span>\n      extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        dateformat<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          formatString<span class=\"token operator\">:</span> <span class=\"token string\">\"DD MMM\"</span><span class=\"token punctuation\">,</span>\n          locale<span class=\"token operator\">:</span> <span class=\"token string\">\"fi\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Conclusions</h2>\n<p>With these improvements we are confident that we’ve solved some pain points that people may have been experiencing with the schema customization API. We would love for feedback about these new features and schema customization, in general. Please post your thoughts to the <a href=\"https://github.com/gatsbyjs/gatsby/issues/12272\">schema customization umbrella issue</a> if you encounter any problems or have any suggestions!</p>\n<p>However, this is but a start and a path of continual, gradual improvement. We are continuously working on further improvements, like allowing users and plugins to define their own extensions (see <a href=\"https://github.com/gatsbyjs/gatsby/pull/13738\">PR #13738</a>).</p>\n<h2>Helpful links</h2>\n<ul>\n<li><a href=\"https://www.gatsbyjs.org/docs/actions/#createTypes\">createTypes Documentation</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/issues/12272\">Umbrella issue for schema customization bug reports</a></li>\n</ul>","frontmatter":{"title":"Improvements to Schema Customization API - Available in Gatsby 2.5.0","date":"May 17, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-05-17-improvements-to-schema-customization/","previous":{"fields":{"slug":"/docs/blog/2019-05-15-enterprise-gatsby-how-to-reduce-your-digital-total-cost-of-ownership-with-gatsby/"},"frontmatter":{"title":"Enterprise Gatsby: How to Reduce Your Digital Total Cost of Ownership (TCO) with Gatsby"}},"next":{"fields":{"slug":"/docs/blog/2019-05-07-advanced-sitemap-plugin-for-seo/"},"frontmatter":{"title":"Advanced Sitemap Plugin for SEO"}}}}}