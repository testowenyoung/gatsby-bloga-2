{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-11-13-getting-set-up-to-manually-test-web-accessibility/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"6c217c98-d326-5589-aec9-543e965a0042","excerpt":"The Basics When I sat down with my brand new work computer, I wanted to get set up to manually test accessibility using as many browsers as I could. This meant…","html":"<h2>The Basics</h2>\n<p>When I sat down with my brand new work computer, I wanted to get set up to manually test accessibility using as many browsers as I could. This meant keeping in mind a few key things and going through some extra steps. These steps are for using free screen readers with a Mac development environment.</p>\n<p>I’m going to lay out:</p>\n<ul>\n<li>Free Screen Readers</li>\n<li>Browser/Screen Reader combinations</li>\n<li>Extra configuration needed to test your project on different platforms</li>\n</ul>\n<p>While this post will focus solely on setup, later posts in this series will cover other parts of accessibility manual testing.</p>\n<p>Please reach out if there are other topics you’d like to hear about!</p>\n<h2>Screen Readers</h2>\n<p>Windows</p>\n<ul>\n<li><a href=\"https://support.microsoft.com/en-us/help/22798/windows-10-complete-guide-to-narrator\">Narrator</a> (made by Microsoft, pre-installed)</li>\n<li><a href=\"https://www.nvaccess.org/about-nvda/\">NVDA</a> (most popular free solution)</li>\n</ul>\n<p>OSX</p>\n<ul>\n<li><a href=\"https://help.apple.com/voiceover/mac/10.15/\">VoiceOver</a> (made by Apple, pre-installed)</li>\n</ul>\n<p>iOS</p>\n<ul>\n<li><a href=\"https://support.apple.com/guide/iphone/turn-on-and-practice-voiceover-iph3e2e415f/ios\">VoiceOver</a> (made by Apple, pre-installed)</li>\n</ul>\n<p>Android</p>\n<ul>\n<li><a href=\"https://support.google.com/accessibility/android/answer/6007100?hl=en&#x26;ref_topic=3529932\">TalkBack</a> (made by Google, pre-installed)</li>\n</ul>\n<h2>Browser/Screen Reader Besties</h2>\n<p>When working on a11y at a previous company, I worked closely with a team at Microsoft. They recommended that I only test Internet Explorer with NVDA and Edge with Narrator. This notion of technology pairings is important for testing since some combinations do not play well together and some combinations aren’t widely used.</p>\n<p>Below are pairings in order of usage (omitting paid screen readers) according to a September 2019 <a href=\"https://webaim.org/projects/screenreadersurvey8/\">survey</a> of screen reader users:</p>\n<ul>\n<li>NVDA &#x26; Firefox</li>\n<li>NVDA &#x26; Chrome</li>\n<li>VoiceOver &#x26; Safari</li>\n<li>VoiceOver &#x26; Chrome</li>\n<li>NVDA &#x26; Internet Explorer</li>\n</ul>\n<p>Narrator &#x26; Edge is not explicitly in the survey but I think it’s still worth testing as Edge’s adoption increases.</p>\n<h2>Extra configuration</h2>\n<h3>Browsers</h3>\n<p>Safari requires an extra setting to allow keyboard navigation:</p>\n<ol>\n<li>Open up Preferences > Advanced in Safari</li>\n<li>check “Press Tab to highlight each item on a webpage” under the “Accessibility” section</li>\n</ol>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/q87r4si3i1f4riat79b5.png\" alt=\"Safari&#x27;s Preferences window with &#x22;press tab to highlight each item on a webpage checked&#x22;\"></p>\n<h3>Mobile Devices</h3>\n<p>If you have an IRL mobile device you’d like to use to test out mobile screen readers and other assistive apps you can reach localhost there too!</p>\n<h4>Android</h4>\n<p>To access localhost from your Android device you’ll need to do (more than) a few things:</p>\n<ol>\n<li>First off, make sure your phone has developer options. You can do this by navigating to <code class=\"language-text\">Settings &gt; System &gt; About Phone</code> and then tapping <strong>Build number</strong> (the very bottom entry) <strong>seven</strong> times.</li>\n<li>Now there should be a new list of settings under <code class=\"language-text\">Settings &gt; System &gt; Advanced &gt; Developer Options</code>. Go here and enable <em>USB Debugging</em></li>\n<li>Connect your device to your development machine via USB.</li>\n<li>From Chrome, access the remote devices panel in DevTools (under <code class=\"language-text\">More Tools &gt; Remote Devices</code>).</li>\n<li>You should see that there is a pending device at the top of the list of devices. Your phone should have a pop-up prompt asking you to accept remote debugging. Accept remote debugging from your phone.</li>\n<li>Now you need to enable Port Forwarding from Settings in the Remote devices tab in DevTools. (Settings are at the very bottom of the list of devices so you may have to scroll down to find them) Check the box to enable it and then click the <em>Add Rule</em> button to create a port for your phone to access what’s in your browser. Type in the port you want to use on your phone on one side (e.g. <code class=\"language-text\">3000</code>) and the local address you want to access from your computer (e.g. <code class=\"language-text\">http://localhost:9000/</code> for a served Gatsby site)</li>\n<li>Boom! If you go to <code class=\"language-text\">http://localhost:3000/</code> on your phone you’ll see your site!</li>\n</ol>\n<h4>iOS</h4>\n<ol>\n<li>Make sure both your device and your computer are on the same WiFi network.</li>\n<li>Make sure you specify the host as <code class=\"language-text\">0.0.0.0</code> when you run your server. (e.g. <code class=\"language-text\">gatsby serve --host=0.0.0.0</code>)</li>\n<li>On your Mac, go to <code class=\"language-text\">Settings &gt; Sharing</code>. You can find the address for your computer’s localhost in fine print under where it says “Computer Name.” It will be in the format of <code class=\"language-text\">computer-name.local</code>. You can edit this address by clicking the “Edit…” button. (e.g. I changed mine to <code class=\"language-text\">gatsby.local</code> so it would be easier to type on my device)</li>\n<li>On your iOS device, navigate to the address determined in the previous step with your port specified. (e.g. <code class=\"language-text\">gatsby.local:9000</code>)</li>\n</ol>\n<p>NOTE: My device tried to fill in the URL by adding <code class=\"language-text\">www.</code> at the beginning. If you’re having trouble reaching your localhost, make sure there is no <code class=\"language-text\">www.</code> in your address bar.</p>\n<h3>Virtual Environments</h3>\n<h4>VirtualBox</h4>\n<p>I downloaded a Windows 10 virtual machine from the <a href=\"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines\">Windows Dev Center</a></p>\n<p>You can access your host computer’s localhost from <code class=\"language-text\">10.0.2.2</code>.</p>\n<h4>Parallels</h4>\n<p>Parallels is a paid product, but since it requires extra configuration to access localhost I figured I’d cover that here too.</p>\n<p>When serving your site, make sure you are hosting it on <code class=\"language-text\">0.0.0.0</code>. For example, if I am running a Gatsby site I’d do <code class=\"language-text\">gatsby serve --host=0.0.0.0</code></p>\n<p>Then, from your Parallels machine you can access localhost from <code class=\"language-text\">10.211.55.2</code></p>\n<h2>Up Next</h2>\n<p>There will be more posts in this series to equip you to manually test the accessibility of websites. For now, topics and timing are still up for discussion.</p>\n<p>I hope to cover topics like:</p>\n<ul>\n<li>Navigating the web using the keyboard</li>\n<li>Screen reader tips and shortcuts</li>\n<li>Testing techniques and methods</li>\n<li>Other assistive technologies</li>\n</ul>\n<p>What would you like to see? Do you have tips you’d like to share?</p>","frontmatter":{"title":"Getting Set Up to Manually Test Web Accessibility","date":"November 13, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-11-13-getting-set-up-to-manually-test-web-accessibility/","previous":{"fields":{"slug":"/docs/blog/2019-11-05-how-gatsby-can-power-your-site-offline-even-without-javascript/"},"frontmatter":{"title":"How Gatsby can power your site offline - even without JavaScript"}},"next":{"fields":{"slug":"/docs/blog/2019-11-14-announcing-gatsby-cloud/"},"frontmatter":{"title":"Announcing Gatsby Cloud"}}}}}