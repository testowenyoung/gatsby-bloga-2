{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-02-26-getting-started-with-gatsby-themes/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"9851ffd3-d127-5921-bd10-196b7983c410","excerpt":"Updated July 9, 2019 to reflect using the  package instead of the (now deprecated) gatsby-mdx package. What is a Gatsby theme? Getting Started Create a new…","html":"<blockquote>\n<p><em>Updated July 9, 2019 to reflect using the <code class=\"language-text\">gatsby-plugin-mdx</code> package instead of the (now deprecated) gatsby-mdx package.</em></p>\n</blockquote>\n<h2>What is a Gatsby theme?</h2>\n<Pullquote cite=\"Jason Lengstorf\">\n  Gatsby themes allow you to focus only on the parts of the site and app\n  building process that you need to care about by abstracting the rest away into\n  a package.\n</Pullquote>\n<h2>Getting Started</h2>\n<p>Create a new directory</p>\n<p><code class=\"language-text\">mkdir gatsby-themes</code></p>\n<p>Navigate to the directory</p>\n<p><code class=\"language-text\">cd gatsby-themes</code></p>\n<p>Create a <em>package.json</em> file</p>\n<p><code class=\"language-text\">yarn init -y</code></p>\n<p>Tidy up your <em>package.json</em> file and create workspaces which includes the project name, site, and your packages. Both of these directories will include their own <em>package.json</em> files.</p>\n<div class=\"gatsby-highlight\" data-language=\"json:title=package.json\"><pre class=\"language-json:title=package.json\"><code class=\"language-json:title=package.json\">{\n  &quot;name&quot;: &quot;gatsby-site&quot;,\n  &quot;private&quot;: true,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;workspaces&quot;: [&quot;site&quot;, &quot;packages/*&quot;]\n}</code></pre></div>\n<p>Next, you want to create your <em>site</em> directory and your <em>packages</em> directory within your <em>gatsby-theme</em> project directory. Make sure the names that you choose for your directories are the same as what you put in your workspaces. You will also want to go into your packages directory and make another directory with the name of your theme. For the purpose of this tutorial, we will call it <em>theme</em>. Then you will want to <code class=\"language-text\">yarn init</code> the <em>theme</em> directory and the <em>site</em> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> site\n<span class=\"token function\">mkdir</span> packages\n<span class=\"token builtin class-name\">cd</span> packages\n<span class=\"token function\">mkdir</span> theme\n<span class=\"token builtin class-name\">cd</span> theme\n<span class=\"token function\">yarn</span> init -y\n<span class=\"token function\">touch</span> index.js\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/site/\n<span class=\"token function\">yarn</span> init -y</code></pre></div>\n<p>The <code class=\"language-text\">-y</code> in <code class=\"language-text\">yarn init</code> automatically adds defaults to your <code class=\"language-text\">package.json</code>. If you opt to run <code class=\"language-text\">yarn init</code> without <code class=\"language-text\">-y</code> you will be asked a few questions. The main thing you will want to pay attention to is the entry point (index.js). For the <em>theme</em> directory, you can leave the entry point as <em>index.js</em> (just make sure you have an <em>index.js</em> file).</p>\n<div class=\"gatsby-highlight\" data-language=\"json:title=packages/theme/package.json\"><pre class=\"language-json:title=packages/theme/package.json\"><code class=\"language-json:title=packages/theme/package.json\">{\n  &quot;name&quot;: &quot;theme&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Practicing making a Gatsby theme&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;\n}</code></pre></div>\n<p>You will want to add Gatsby, React, and ReactDOM to as dev dependencies for <em>site</em>.</p>\n<p><code class=\"language-text\">yarn workspace site add gatsby react react-dom</code></p>\n<p>Then you will navigate out of the <em>site</em> directory and add Gatsby, React, and ReactDOM as dev dependencies for <em>theme</em>.</p>\n<p><code class=\"language-text\">yarn workspace theme add gatsby react react-dom -D</code></p>\n<p>You will want to make Gatsby, React, and ReactDom peer dependencies in the <em>theme</em> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"json:title=packages/theme/package.json\"><pre class=\"language-json:title=packages/theme/package.json\"><code class=\"language-json:title=packages/theme/package.json\"> &quot;devDependencies&quot;: {\n    &quot;gatsby&quot;: &quot;^2.0.118&quot;,\n    &quot;react&quot;: &quot;^16.8.1&quot;,\n    &quot;react-dom&quot;: &quot;^16.8.1&quot;\n  },\n  &quot;peerDependencies&quot;: {\n    &quot;gatsby&quot;: &quot;^2.0.118&quot;,\n    &quot;react&quot;: &quot;^16.8.1&quot;,\n    &quot;react-dom&quot;: &quot;^16.8.1&quot;\n  },</code></pre></div>\n<h2>Installing MDX and gatsby-plugin-page-creator</h2>\n<h3>What is MDX?</h3>\n<blockquote>\n<p>MDX is markdown for the component era. It lets you write JSX embedded inside markdown. That’s a great combination because it allows you to use markdown’s often terse syntax (such as # heading) for the little things and JSX for more advanced components.</p>\n</blockquote>\n<p>Read more about Gatsby+MDX <a href=\"https://gatsby-mdx.netlify.app/\">here.</a></p>\n<p>In your <em>theme</em> directory, add src/pages/index.mdx</p>\n<p>Then you need to add gatsby-plugin-mdx and MDX as dependencies.</p>\n<p><code class=\"language-text\">yarn workspace theme add gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react</code></p>\n<p>Next, you will want to add gatsby-plugin-page-creator</p>\n<p><code class=\"language-text\">yarn workspace theme add gatsby-plugin-page-creator</code></p>\n<blockquote>\n<p>Gatsby plugin that automatically creates pages from React components in specified directories. Gatsby includes this plugin automatically in all sites for creating pages from components in src/pages. With this plugin, any file that lives in the src/pages folder (or subfolders) will be expected to export a React Component to generate a Page.</p>\n</blockquote>\n<p>In the future, Gatsby will automatically handle adding the page-creator plugin.</p>\n<p>Read more about the page-creator plugin <a href=\"/gatsby-bloga-2/packages/gatsby-plugin-page-creator/\">here.</a></p>\n<p>Next, you will want to create your <em>gatsby-config.js</em> file under your <em>theme</em> directory. Make sure to include ‘gatsby-plugin-mdx’ and ‘gatsby-plugin-page-creator.’</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=packages/theme/gatsby-config.js\"><pre class=\"language-javascript:title=packages/theme/gatsby-config.js\"><code class=\"language-javascript:title=packages/theme/gatsby-config.js\">const path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {},\n    },\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: path.join(__dirname, `src/pages`),\n      },\n    },\n  ],\n}</code></pre></div>\n<p>Lastly, you’re going to want to add a <em>gatsby-config.js</em> file to your <em>site</em> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=site/gatsby-config.js\"><pre class=\"language-javascript:title=site/gatsby-config.js\"><code class=\"language-javascript:title=site/gatsby-config.js\">module.exports = {\n  plugins: [`theme`],\n}</code></pre></div>\n<h3>Setting up Site <code class=\"language-text\">package.json</code></h3>\n<p>You will need to add <code class=\"language-text\">gatsby</code> CLI scripts and specify your newly created <code class=\"language-text\">theme</code> as a dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"json:title=site/package.json\"><pre class=\"language-json:title=site/package.json\"><code class=\"language-json:title=site/package.json\">{\n  &quot;name&quot;: &quot;site&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;scripts&quot;: {\n    // highlight-start\n    &quot;develop&quot;: &quot;gatsby develop&quot;,\n    &quot;build&quot;: &quot;gatsby build&quot;\n    // highlight-end\n  },\n  &quot;dependencies&quot;: {\n    &quot;gatsby&quot;: &quot;^2.3.34&quot;,\n    &quot;react&quot;: &quot;^16.8.6&quot;,\n    &quot;react-dom&quot;: &quot;^16.8.6&quot;,\n    // highlight-start\n    &quot;theme&quot;: &quot;*&quot;\n    // highlight-end\n  }\n}</code></pre></div>\n<p>Now, you can make sure <em>site</em> is linked to <em>theme</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span>\n<span class=\"token function\">yarn</span> workspaces info</code></pre></div>\n<p>Your workspace info should look similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"site\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"workspaceDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"theme\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"mismatchedWorkspaceDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"theme\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"packages/theme\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"workspaceDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"mismatchedWorkspaceDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Run the Site</h3>\n<p>Now that we’ve set up the site’s <em>package.json</em> we can run the workspace:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> workspace site develop</code></pre></div>\n<h3>Customizing the Index Page</h3>\n<p>You can override the index page from your theme by creating one in site. To do so, change directory into\nthe <em>site</em> directory, and create an <em>index.mdx</em> file in the pages folder.</p>\n<p><code class=\"language-text\">site/src/pages/index.mdx</code></p>\n<p>Your website content goes in <em>index.mdx</em>.</p>\n<p>Now, rerun the development server and see your new content:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> workspace site develop</code></pre></div>\n<h2>Styling Layout and Components</h2>\n<p>Next, you will navigate to the <em>theme</em> directory. You will then create a <em>components</em> folder under <em>src</em>, and in components you create a <em>layout.js</em> file.</p>\n<p><code class=\"language-text\">packages/theme/src/components/layout.js</code></p>\n<p>Inside of your <em>layout.js</em> file, you can add your styling.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=packages/theme/src/components/layout.js\"><pre class=\"language-jsx:title=packages/theme/src/components/layout.js\"><code class=\"language-jsx:title=packages/theme/src/components/layout.js\">export default function Layout({ children }) {\n  return (\n    &lt;div\n      style={{\n        // Layout styling\n        margin: `10%`,\n        backgroundColor: `#fafafa`,\n      }}\n    &gt;\n      {children}\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>To make sure your <em>layout.js</em> file is connected to your theme you will navigate to your <em>gatsby-config.js</em> file in your <em>theme</em> directory. You will add defaultLayouts under options and make sure that the <em>layout.js</em> is required.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=packages/theme/gatsby-config.js\"><pre class=\"language-javascript:title=packages/theme/gatsby-config.js\"><code class=\"language-javascript:title=packages/theme/gatsby-config.js\">const path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        // highlight-start\n        defaultLayouts: {\n          default: require.resolve(`./src/components/layout.js`),\n        },\n        // highlight-end\n      },\n    },\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: path.join(__dirname, `src/pages`),\n      },\n    },\n  ],\n}</code></pre></div>\n<p>If you want to reuse a specific style, you can create styled components. In your components directory, you will create a new file (for example: <em>header.js</em>).</p>\n<p>Here is an example of how you can set-up your styled component in <em>header.js</em>. Please make sure you write css-in-javascript when styling your div.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=header.js\"><pre class=\"language-jsx:title=header.js\"><code class=\"language-jsx:title=header.js\">export default function Header({ children }) {\n  return (\n    &lt;section\n      style={{\n        // Header Specific Styling //\n        padding: &quot;10px&quot;,\n        backgroundColor: &quot;blue&quot;,\n      }}\n    &gt;\n      {children}\n    &lt;/section&gt;\n  )\n}</code></pre></div>\n<p>To import your styled components, go to <em>index.js</em> and export your component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=packages/theme/index.js\"><pre class=\"language-javascript:title=packages/theme/index.js\"><code class=\"language-javascript:title=packages/theme/index.js\">export { default as Header } from &quot;./src/components/header&quot;</code></pre></div>\n<p>If you want to use this component in your site, you will then go to your page (<em>index.mdx</em>) and import the specific components.</p>\n<p><code class=\"language-text\">import { Header } from &#39;theme&#39;;</code>\nYou can then use it to style specific things in your file.</p>\n<div class=\"gatsby-highlight\" data-language=\"mdx\"><pre class=\"language-mdx\"><code class=\"language-mdx\">&lt;Header&gt;Header content goes here&lt;/Header&gt;</code></pre></div>\n<h2>Using Your Theme</h2>\n<p>It’s finally time to use and share your theme! You can push your whole directory (<em>gatsby-themes</em>) to GitHub.</p>\n<p>If you ever want to use your theme, you will do:</p>\n<p><code class=\"language-text\">gatsby new name-of-project theme-url</code></p>\n<p>Once you have cloned this theme into your new project, you can make edits to the files in your pages folder.</p>\n<p>If you want to check your progress, go to the <em>site</em> directory and</p>\n<p><code class=\"language-text\">gatsby develop</code></p>\n<p>Once your server is up you should see your beautiful theme applied to your files!</p>\n<h3>Troubleshooting Plugin Errors</h3>\n<p>If you run into an error that your theme plugin can’t be found, try clearing your cache. You can either use <code class=\"language-text\">rm -rf .cache</code> in your terminal, or you can add:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby clean\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>to your <em>package.json</em> file. Then you can use <code class=\"language-text\">npm run clean</code> in your terminal.</p>\n<p>If you happen to find this tutorial helpful, please feel free to let me know on Twitter <a href=\"https://www.twitter.com/KatieFujihara\">@KatieFujihara</a>! I would love to see what kind of themes you build.</p>","frontmatter":{"title":"Getting Started with Gatsby Themes and MDX","date":"February 26, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-02-26-getting-started-with-gatsby-themes/","previous":{"fields":{"slug":"/docs/blog/2019-02-20-introducing-use-static-query/"},"frontmatter":{"title":"Introducing useStaticQuery"}},"next":{"fields":{"slug":"/docs/blog/2019-02-27-reactiflux-q-and-a/"},"frontmatter":{"title":"Q and A: Reactiflux and the Gatsby Team"}}}}}