{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-02-20-introducing-use-static-query/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"be59f721-1581-573c-b527-51306c692eee","excerpt":"React Hooks are cool. Besides simplifying your code and removing the need for a lot of boilerplate associated with classes in JavaScript (looking at you…","html":"<p>React Hooks are <em>cool</em>. Besides simplifying your code and removing the need for a lot of boilerplate associated with classes in JavaScript (looking at you, <code class=\"language-text\">this</code>), they enable some serious shareability. They also make it possible to use state in functional components.</p>\n<p>You can probably tell that we’ve been super excited about <a href=\"https://reactjs.org/docs/hooks-intro.html\">React Hooks</a>. So when they finally landed in React 16.8, we figured it was time to give our very own <code class=\"language-text\">StaticQuery</code> component the hook treatment!</p>\n<h2>Say hello to useStaticQuery</h2>\n<p><code class=\"language-text\">useStaticQuery</code> is a hook that takes a GraphQL query and returns your data. That’s it.</p>\n<p><strong>No more Render Props necessary to use a Static Query</strong></p>\n<p>This simplifies accessing data in your components and also keeps your component tree shallow.</p>\n<p>Let’s quickly check out a basic example. Here’s a typical Header component, first written using <code class=\"language-text\">StaticQuery</code> and then <code class=\"language-text\">useStaticQuery</code>.</p>\n<h3>Before</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>StaticQuery</span>      query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        query {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header</code></pre></div>\n<h3>After</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> site <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span></span>    graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header</code></pre></div>\n<p>Isn’t that cleaner and more succinct?</p>\n<p>Just like <code class=\"language-text\">StaticQuery</code>, when you build your site for production, Gatsby will parse <em>and</em> execute your queries in <code class=\"language-text\">useStaticQuery</code> and inject data in just the right place.</p>\n<p>Where this gets even more powerful is the ability to create custom hooks that use <code class=\"language-text\">useStaticQuery</code> in them. Let’s say you need to query for the site title several times in your app. Instead of a call to <code class=\"language-text\">useStaticQuery</code> in each component, you can extract it out to a custom hook like:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useSiteMetadata</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> site <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>\n    graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> site<span class=\"token punctuation\">.</span>siteMetadata\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now every time you need the site title, you can use this custom hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSiteMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isn’t that neat?</p>\n<p><img src=\"/gatsby-bloga-2/3cc7d5dfc58ce636f71971e823f5ab49/excited.gif\" alt=\"excited-gif\"></p>\n<p>And if there’s a change to the structure of that data, you only need to change the query in one place!</p>\n<p>We’re really excited about this pattern and everything it enables. With our upcoming <a href=\"/gatsby-bloga-2/blog/2019-02-11-gatsby-themes-livestream-and-example/\">themes</a> feature, a theme could even export custom hooks of its own. Users could access data using these without writing a single query.</p>\n<h2>Where can I get this?</h2>\n<p><a href=\"https://twitter.com/jacobimpson/status/1095930703504584706\">https://twitter.com/jacobimpson/status/1095930703504584706</a></p>\n<p>The astute reader (Jacob is astute, be like Jacob) would’ve noticed that we <em>stealthily</em> released <code class=\"language-text\">useStaticQuery</code> last week.</p>\n<p>To use <code class=\"language-text\">useStaticQuery</code>, update <code class=\"language-text\">gatsby</code> to v2.1.0 and <code class=\"language-text\">react</code> and <code class=\"language-text\">react-dom</code> to v16.8.0!</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gatsby react react-dom</code></pre></div>\n<h2>Known Limitations</h2>\n<p>Because of the way queries are currently parsed in Gatsby, <code class=\"language-text\">useStaticQuery</code> has one small limitation at the moment. You can only use one instance of <code class=\"language-text\">useStaticQuery</code> in a file. That’s it! This doesn’t mean your app can’t have multiple uses, but rather that a single JavaScript file can only have one instance of <code class=\"language-text\">useStaticQuery</code>.</p>\n<p>We’re working on fixing this soon.</p>\n<h2>Next Steps</h2>\n<ul>\n<li>Check out the <a href=\"/gatsby-bloga-2/docs/use-static-query/\">documentation</a></li>\n<li>To see <code class=\"language-text\">useStaticQuery</code> in action (and for a really gentle introduction to Hooks in general), check out the <a href=\"https://www.youtube.com/watch?v=asrdFuAxPaU&#x26;list=PLz8Iz-Fnk_eTpvd49Sa77NiF8Uqq5Iykx\">livestream</a> Jason Lengstorf and I did last week</li>\n<li>Hit <a href=\"https://twitter.com/chatsidhartha\">me</a> up on Twitter for any questions!</li>\n</ul>\n<p>We hope you enjoy using <code class=\"language-text\">useStaticQuery</code> in your Gatsby apps. Happy building!</p>","frontmatter":{"title":"Introducing useStaticQuery","date":"February 20, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-02-20-introducing-use-static-query/","previous":{"fields":{"slug":"/docs/blog/2019-02-14-behind-the-scenes-q-and-a/"},"frontmatter":{"title":"Behind the Scenes Q & A: What Makes Gatsby Great Webinar"}},"next":{"fields":{"slug":"/docs/blog/2019-02-26-getting-started-with-gatsby-themes/"},"frontmatter":{"title":"Getting Started with Gatsby Themes and MDX"}}}}}