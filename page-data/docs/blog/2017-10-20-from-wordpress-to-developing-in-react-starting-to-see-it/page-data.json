{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2017-10-20-from-wordpress-to-developing-in-react-starting-to-see-it/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"44f92666-35b6-5894-ad2b-4dd1f33ce224","excerpt":"As a frontend designer I’ve always prided myself on being an HTML and CSS\nspecialist. My use of JavaScript has been limited to animations and DOM\nmanipulation…","html":"<p>As a frontend designer I’ve always prided myself on being an HTML and CSS\nspecialist. My use of JavaScript has been limited to animations and DOM\nmanipulation. However, at\n<a href=\"https://indigotree.co.uk\">Indigo Tree</a>\nwe’re branching out from our staple of WordPress and trying different methods of\ncreating websites with functionality that our clients require, whilst maximizing\ntheir budget.</p>\n<p>We’re also bracing ourselves for what we’re anticipating to be the stormfront of\n<a href=\"https://wordpress.org/plugins/gutenberg/\">Gutenberg</a>\nfor our WordPress projects. Once it’s included in the WordPress Core, writing\ncomponents in JavaScript for the Gutenberg editor will be necessary for every\ndeveloper on a project.</p>\n<p>So I decided to dive into learning React with a few courses and some\nexperimentation. I had the aim of building a site in\n<a href=\"/gatsby-bloga-2/\">Gatsby.js</a>\nas a test for doing projects built entirely in React.</p>\n<h2>Letting Go</h2>\n<p>The first thing I had to do while investigating React was to let go of some\npreconceived ideas I had - that JSX is just plain weird, that JSS (JavaScript\nStylesheets) was an unnecessary abstraction. So I tried not to be bothered by\nthe templating weirdness too much and embrace the differences. My classes soon\nbecame <code class=\"language-text\">classNames</code>s, my <code class=\"language-text\">&lt;a&gt;</code> tags became <code class=\"language-text\">&lt;Links&gt;</code>, and I quickly saw what\npeople had been enthusing about.</p>\n<p>Managing everything in one place is such a cathartic experience.</p>\n<p>With WordPress templating, I used to have function files, filter files, template\nfiles, and Sass partials, often with similar names, depending on the framework\nI’d be using. To build a site meant needing to buffer the entire project in my\nshort-term memory. Not an easy feat to manage.</p>\n<p>And then you would complete a project, and forget it all entirely. Until it went\nto the client…</p>\n<p>Every time a client returned with a last-minute change, I would open up the code\n(which I might not have touched for weeks or months), and try to grok what\nfunction lived where, or what I had called that Sass partial. Even with the help\nof browser dev tools, this can be really annoying.</p>\n<p>Now with Gatsby and React, I have my logic in one language, and in a way that\nmakes groking easier. I have my layout, template and config modules at hand in\nthe folder structure, without duplication.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token comment\">// Template for blog page</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>markdownRemark\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The data query</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        type\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Whilst this might <em>look</em> weird, it actually makes it much easier to understand\nwhat’s going on. You know you’re dealing with this data, using this HTML, and\nwith CSS-in-JS strategies such as Styled Components, you can see exactly what\nCSS is going to be implemented too. In one file.</p>\n<p>Beautiful.</p>\n<h2>GraphQL: SQL-like data queries</h2>\n<p>One thing I particularly love about Gatsby.js is its inclusion of\n<a href=\"https://graphql.org/\">GraphQL</a>. Like SQL, you\nuse GraphQL to query your data, whether from the WordPress API, Contentful or\nMarkdown, and extract a dataset to display in your template.</p>\n<p>This approach to data is really adaptable. I love the fact that you can install\na plugin and query your API endpoints with such ease.</p>\n<p>Gatsby.js comes with GraphiQL, which is a simple web-based IDE so you can query\nyour data and get back examples of content immediately. You can then copy this\nquery into your React module and get back the information you need, whether it’s\nthe title, content, featured image, categories or any other frontmatter you\nmight have set up.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        type\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Aside from those pesky tick characters, which are sometimes hard to spot for a\nnewbie, I think this is a great tool, and has sped up my development a\nsignificant amount.</p>\n<h2>CSS in JS</h2>\n<p>This is the thing that I found hardest about React. I’ve tried 3 methods so far,\nand don’t really love any of them.</p>\n<p>However, since I’m managing my HTML with JavaScript, why not CSS as well? As\nabove, having everything in one place simplifies the workflow and allows you to\nfocus on context without having to grok SCSS again, reducing mental friction.</p>\n<h2>My Project</h2>\n<p>Following the <a href=\"/gatsby-bloga-2/tutorial/\">tutorial on Gatsbyjs</a> I built\nup my project from scratch, breaking things profusely at first, but it honestly\ndidn’t take long to gain confidence enough so that I launched my first site at\n<a href=\"https://freebabylon5.com\">https://freebabylon5.com</a>\nrecently.</p>\n<p>Be warned: the tutorial isn’t quite finished yet, you might be better off\nstarting with\n<a href=\"/gatsby-bloga-2/starters/\">one of the starter kits already available</a>,\nso that you get <code class=\"language-text\">react-helmet</code> and active links implemented, the 2 things I had\nto learn independently.</p>\n<h2>The Way Forward?</h2>\n<p>My initial concerns around using a JavaScript framework such as React seem to\nhave all been allayed. With server-side React, we no longer have a dependency on\nfrontend JavaScript, so progressive enhancement is not just a possibility but a\nstandard. There’s momentum towards better accessibility, and for me as a\ndeveloper, the tools are there (such as Babel, Chrome Dev Tools React extension,\nand others) for a faster, more efficient development experience.</p>\n<p>I’m glad to say I’m sold on the idea and methods of developing with JavaScript,\nand React in particular. The site I’ve re-built from WordPress into Gatsby.js is\nnow live at\n<a href=\"https://freebabylon5.com\">https://freebabylon5.com</a>.</p>\n<p>Together with my colleagues at\n<a href=\"https://indigotree.co.uk\">Indigo Tree</a>\nwe’re now looking at using WordPress as a backend, where clients can edit their\ncontent without the worries of insecure plugins or other methods of being\nhacked.</p>\n<p>Using GatsbyJS with its “Bring Your Own Data” strategy makes perfect sense, and\nwe’re about to start building our first Gatsby client site using the plugin\n<a href=\"/gatsby-bloga-2/packages/gatsby-source-wordpress/\"><code class=\"language-text\">gatsby-source-wordpress</code></a>\nto pull in our data and build a totally secure website with some pretty\nimpressive gains on loading time. We’ll also sleep better at night knowing\ninsecurities in WordPress are no longer putting our clients at risk.</p>\n<p>The web is always changing. And the way forward isn’t always easy to see. Now,\nwith GatsbyJS, we’re beginning to feel like we can visualize where things are\ngoing.</p>","frontmatter":{"title":"From WordPress to Developing in React — Starting to See It","date":"October 20, 2017","description":null}}},"pageContext":{"slug":"/docs/blog/2017-10-20-from-wordpress-to-developing-in-react-starting-to-see-it/","previous":{"fields":{"slug":"/docs/blog/2017-10-17-building-i18n-with-gatsby/"},"frontmatter":{"title":"Building i18n with Gatsby"}},"next":{"fields":{"slug":"/docs/blog/2017-10-29-my-search-for-the-perfect-universal-javaScript-framework/"},"frontmatter":{"title":"My search for the perfect universal JavaScript framework"}}}}}