{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-08-02-what-is-jsx-pragma/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"5b561ed7-9f8b-5d2a-b556-8eccbdd0f4da","excerpt":"If you‚Äôre looking into using Theme UI, you‚Äôll come across some (potentially) unfamiliar looking syntax: This is a JSX pragma. What the heck is a JSX pragma? I‚Ä¶","html":"<p>If you‚Äôre looking into using <a href=\"https://theme-ui.com/\">Theme UI</a>, you‚Äôll come across some (potentially) unfamiliar looking syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/** @jsx jsx */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"theme-ui\"</span></code></pre></div>\n<p>This is a JSX pragma. What the heck is a JSX pragma? I had heard the phrase, but not thought too much about it until it came up with Gatsby theming ‚Äî and lots of other folks hadn‚Äôt either:</p>\n<p><a href=\"https://twitter.com/amber1ey/status/1153382680916049921\">https://twitter.com/amber1ey/status/1153382680916049921</a></p>\n<h2>Striking a balance in documentation</h2>\n<p>In any software project or framework, it can be difficult to define where documentation should start or end. While you might not need to know exactly what a custom JSX pragma is in order to use Theme UI, for example, maybe you want to.</p>\n<p>ü§î If we exclude it, will that be distracting? ‚ÄúWhat the heck is that? I‚Äôm going to go down a Google rabbit hole trying to find out.‚Äù</p>\n<p>ü§Ø If we include it, will it be overwhelming? ‚ÄúI just want to style a theme, why are you talking to me about pragmas??‚Äù</p>\n<p>So, a happy medium. If you <strong>are</strong> interested, here‚Äôs a blog post for you!</p>\n<h2>What is a pragma?</h2>\n<p>A pragma is a compiler directive. It tells the compiler how it should handle the contents of a file.</p>\n<p>An example of this in JavaScript is <code class=\"language-text\">&#39;use strict&#39;</code> mode. <code class=\"language-text\">&#39;use strict&#39;</code> is a directive that enables JavaScript‚Äôs <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict Mode</a>, which is a way to opt in to a more restricted variant of JavaScript. It denotes that the code should be processed in a specific way.</p>\n<h2>What is JSX pragma?</h2>\n<p>JSX syntax on its own isn‚Äôt readable by the browser. In order to ship something readable to the browser, JSX needs to be converted to plain JavaScript.</p>\n<p>Most React-based frameworks (like Gatsby), come with tooling already set up to support this conversion (usually Babel). How does that tooling know how to transform JSX? By default, <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx\">the Babel plugin</a> will convert JSX into JavaScript that calls the <code class=\"language-text\">React.createElement</code> function.</p>\n<p>Take the following JSX, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>That JSX syntax <em>compiles to</em> a call to <code class=\"language-text\">React.createElement</code>, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">\"greeting\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Hello, world!\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Other libraries like Preact, Emotion, and Vue.js use different custom functions, and handle JSX differently.</p>\n<h2>Using a custom JSX pragma</h2>\n<p>There are two ways to specify a custom function (and therefore replace <code class=\"language-text\">React.createElement</code>):</p>\n<ol>\n<li>Add an option to the Babel plugin</li>\n<li>Set a <em>pragma comment</em> at the beginning of a module</li>\n</ol>\n<h3>Add an option to the Babel plugin</h3>\n<p>Changing the function in the Babel plugin will transform <em>all</em> JSX in an application to use the specified function.</p>\n<h3>Set a pragma comment</h3>\n<p>Using a pragma comment will limit the change to the modules the comment is added to. Therefore, you can use <code class=\"language-text\">React.createElement</code> by default, and <em>opt in</em> to the custom function only where needed. This is <a href=\"/gatsby-bloga-2/docs/theme-ui/#adding-styles-to-elements\">the approach taken in Theme UI</a>.</p>\n<h2>Why use a custom JSX pragma?</h2>\n<p>Using a custom JSX pragma is useful when you want to customize the transform process of JSX => JavaScript.</p>\n<ul>\n<li>Emotion uses a <a href=\"https://emotion.sh/docs/css-prop#jsx-pragma\">custom JSX pragma to use the Emotion <code class=\"language-text\">css</code> prop</a>.</li>\n<li>Theme UI uses a custom JSX pragma to add support for Theme UI‚Äôs <code class=\"language-text\">sx</code> prop, which is used to style elements by referencing values from the theme object.</li>\n</ul>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://jasonformat.com/wtf-is-jsx/\">WTF is JSX</a></li>\n<li><a href=\"https://theme-ui.com/jsx-pragma\">JSX Pragma doc</a> in Theme UI documentation.</li>\n<li><a href=\"https://reactjs.org/docs/introducing-jsx.html#jsx-represents-objects\">JSX Represents Objects</a> in React.js documentation.</li>\n</ul>","frontmatter":{"title":"What is JSX pragma?","date":"August 02, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-08-02-what-is-jsx-pragma/","previous":{"fields":{"slug":"/docs/blog/2019-07-30-how-i-used-theme-ui-to-build-my-gatsby-themes-library/"},"frontmatter":{"title":"How I used Theme UI to build my Gatsby Themes library"}},"next":{"fields":{"slug":"/docs/blog/2019-07-23-google-sheets-gatsby-acroyoga-video-explorer/"},"frontmatter":{"title":"Using the Google Sheets API With Gatsby for Creating Fast Sites With Simple Data Sources"}}}}}