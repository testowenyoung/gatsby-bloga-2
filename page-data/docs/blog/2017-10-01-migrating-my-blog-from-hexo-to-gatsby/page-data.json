{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2017-10-01-migrating-my-blog-from-hexo-to-gatsby/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"50695f1c-74dd-5062-b1e4-3af60eed2d00","excerpt":"This article was originally posted on\nmy blog (original link).\nI’m reposting here in the hopes that it helps more people get started with\nGatsby! Migrating a…","html":"<p><em>This article was originally posted on\n<a href=\"https://blog.iansinnott.com/migrating-a-blog-to-gatsby-part-2-of-gatsby-migration/\">my blog (original link)</a>.\nI’m reposting here in the hopes that it helps more people get started with\nGatsby!</em></p>\n<h2>Migrating a blog to Gatsby</h2>\n<hr>\n<p><strong>Abstract:</strong> Gatsby is a great tool for building a blog. In part 1 I did the\nmore basic task of migrating an existing React site to Gatsby. This time I\nmigrated my blog, which was a lot more involved and required a lot more\nGatsby-specific knowledge.</p>\n<p>Here’s the gist of what I’m going to cover:</p>\n<ul>\n<li>Preparing an existing blog for migration</li>\n<li>Configuring Gatsby to handle markdown</li>\n<li>Querying your markdown files using GraphQL</li>\n<li>Adding custom data to the generated GraphQL schema</li>\n<li>Turning all your markdown files into static pages</li>\n</ul>\n<p>Let’s jump in.</p>\n<hr>\n<h3>Preparing your existing blog for migration</h3>\n<p><strong>NOTE:</strong> If you <em>don’t</em> already have a blog or want to create one from scratch\nthere’s a\n<a href=\"/gatsby-bloga-2/blog/2017-07-19-creating-a-blog-with-gatsby/\">tutorial for exactly that right here</a>.</p>\n<p>Let’s move some files around. Gatsby gives you a good amount of flexibility when\nit comes to file structure, but for consistency with the docs I’m going to use\nthe suggested file structure for migrating my blog. How you handle this step\nwill depend on what you’re migrating from. I am migrating from Hexo, which is\nvery similar to Jekyll in how it structures files.</p>\n<h4>Clean up your source repo</h4>\n<p>For the first step, clear everything other than your actual post content out of\nthe repo. For me, this meant everything that wasn’t under the <code class=\"language-text\">source/</code>\ndirectory (that’s a Hexo convention). One way to do this is to take everything\nnot relevant to the upcoming Gatsby blog and move it into its own directory that\ndoesn’t interfere with anything. I chose to create <code class=\"language-text\">hexo.bak/</code> where all my old\nblog files would live (except for the content).</p>\n<p>You could also simply delete everything other than your raw content. It’s up to\nyou. But once you’re done with this cleanup you should have made a decision on\nwhere to hold your content, and moved everything else away or removed it.</p>\n<p>Here’s what that looks like for me:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── content\n│   ├── _drafts\n│   │   └── [ Draft markdown files ... ]\n│   └── _posts\n│       └── [ Post markdown files ... ]\n└── hexo.bak\n    └── [ All my old hexo related files ... ]</code></pre></div>\n<p>For the rest of this post I’ll ignore the <code class=\"language-text\">hexo.bak/</code> directory because it’s not\nrelevant to Gatsby.</p>\n<h3>Set up Gatsby</h3>\n<p>You need to copy all the standard Gatsby boilerplate into your directory. There\nare many ways you could do this but I’ll go over what I did.</p>\n<p>To get all the Gatsby files you can use the Gatsby CLI.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">gatsby new temp<span class=\"token punctuation\">-</span>gatsby<span class=\"token punctuation\">-</span>files <span class=\"token comment\"># Initialize Gatsby in a temp directory</span>\ncp <span class=\"token punctuation\">-</span>R temp<span class=\"token punctuation\">-</span>gatsby<span class=\"token punctuation\">-</span>files/* ./ <span class=\"token comment\"># Copy all the files into your root directory</span>\nrm <span class=\"token punctuation\">-</span>rf temp<span class=\"token punctuation\">-</span>gatsby<span class=\"token punctuation\">-</span>files     <span class=\"token comment\"># Remove the temp directory</span></code></pre></div>\n<p>However you get Gatsby initialized in your repository root, afterwards you\nshould have a file structure that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── content\n│   └── [ Markdown files ... ]\n├── public\n│   └── index.html\n├── src\n│   ├── layouts\n│   │   ├── index.css\n│   │   └── index.js\n│   └── pages\n│       ├── 404.js\n│       ├── index.js\n│       └── page-2.js\n├── gatsby-config.js\n└── package.json</code></pre></div>\n<p>Now run the Gatsby dev server to make sure everything works:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run develop</code></pre></div>\n<p><strong>NOTE:</strong> If you open up <code class=\"language-text\">package.json</code> you can see what the <code class=\"language-text\">develop</code> script is\ndoing.</p>\n<p>Boom 💥! The default site is up.</p>\n<p><img src=\"https://dropsinn.s3.amazonaws.com/Screen%20Shot%202017-08-26%20at%2012.57.40%20PM.png\" alt=\"Gatsby Default Screen\"></p>\n<h3>Rendering a list of posts</h3>\n<p>Let’s customize that landing page to render a list of posts. You will also\nprobably want to customize the header and overall layout.</p>\n<h4>Customizing the layout</h4>\n<p>This is pretty simple. Just modify the primary layout file that was generated:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/layouts/index.js</code></pre></div>\n<p>You can also customize the styles in <code class=\"language-text\">src/layouts/index.css</code>. Stylus, Sass,\nLess, etc are also supported if you add the appropriate plugin.\n<a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages\">Here’s the list</a>\n(there’s a page on the website too, but the source is more up to date).</p>\n<p><strong>Sidenote:</strong> You can also create your own plugin to do whatever you want, which\nI talked about in part 1.</p>\n<h4>Customizing the landing page</h4>\n<p>Also straightforward, just edit:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/pages/index.js</code></pre></div>\n<p>This file is where we’ll actually render out the list of posts. So where the\nhell does that data come from??</p>\n<h4>Querying data with GraphQL</h4>\n<p>Now we’re getting in to the meat of Gatsby and one of the areas where it really\nshines: Data sources. You can pull in data from anywhere to be rendered in your\nblog, but for our use case the only data source will be the file system (aka the\nmarkdown files stored on your hard drive).</p>\n<p>But first, let’s check out <a href=\"https://github.com/graphql/graphiql\">GraphiQL</a>. It’s an excellent playground for\ntesting out GraphQL queries in any GraphQL project. Gatsby ships with it enabled\nby default, thank goodness. GraphQL can actually be oddly opaque without this\nexcellent tool.</p>\n<p>Visit <code class=\"language-text\">http://localhost:8000/___graphql</code> in the browser and you’ll be greeted\nwith this lovely dev tool:</p>\n<p><img src=\"https://dropsinn.s3.amazonaws.com/Screen%20Shot%202017-08-26%20at%201.31.08%20PM.png\" alt=\"Gatsby GraphiQL\"></p>\n<p>I recommend getting to know this tool if you’re not already familiar. You will\nbe coming back to this often to find the right query to pull data for your\npages.</p>\n<h4>Querying the file system</h4>\n<p>If you play around with GraphiQL you’ll notice there’s not that much there.\nLet’s fix that. We need to teach Gatsby how to query the file system. Luckily\nthis is so common it’s been done for you. Install the file system source plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i --save gatsby-source-filesystem</code></pre></div>\n<p>Now modify <code class=\"language-text\">gatsby-config.js</code> to both use the plugin and tell it what directory\nto source files from. Add this to the <code class=\"language-text\">plugins</code> array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token string\">'gatsby-source-filesystem'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Name this source</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./content/_posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Tell it where to find the files</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see on my system I keep all my markdown files under <code class=\"language-text\">content/_posts/</code>\nwhich is reflected in the <code class=\"language-text\">path</code> option for the plugin.</p>\n<p>Now restart the dev server and open GraphiQL up again. You should have access to\nthe <code class=\"language-text\">allFile</code> root type. Try running this query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  allFile <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        ext\n        name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will list all the files in the directory you specified to the plugin. You\ncan query all sorts of information about the files. Just investigate the fields\navailable to you under <code class=\"language-text\">node</code> in GraphQL.</p>\n<p><strong>Pro tip:</strong> Hit <kbd>ctrl</kbd><kbd>space</kbd> to trigger autocomplete and\nbring up the list of all available fields.</p>\n<h4>Handling Markdown</h4>\n<p>Being able to query files is a big win, and if you have a directory of HTML\nfiles this is all you will need. But if you want to render markdown files as\nHTML you will need another plugin. Let’s add that now:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i --save gatsby-transformer-remark</code></pre></div>\n<p>As before, add it to the <code class=\"language-text\">plugins</code> field in <code class=\"language-text\">gatsby-config.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token string\">'gatsby-transformer-remark'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This particular plugin can also take <em>its own</em> plugins via the <code class=\"language-text\">plugins</code> option.\nI’ve left it empty but this is where you can add things like syntax highlighting\nor auto-linking of headers. Here’s the current list:\n<a href=\"https://www.npmjs.com/search?q=gatsby-remark\">https://www.npmjs.com/search?q=gatsby-remark</a></p>\n<p>Save and restart your dev server, then go into GraphiQL and try out the new\n<code class=\"language-text\">allMarkdownRemark</code> field:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  allMarkdownRemark <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        html\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This query gives you the full HTML for all your markdown files. If you are using\nfrontmatter you can also access that here. I’m assuming you have a <code class=\"language-text\">title</code> field\nin your frontmatter:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  allMarkdownRemark <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        frontmatter <span class=\"token punctuation\">{</span>\n          title\n        <span class=\"token punctuation\">}</span>\n        html\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you have access to the full HTML of your posts as well as the titles. With\nthis we have enough information to render a list of posts on the front page.</p>\n<h4>Getting GraphQL data into your components</h4>\n<p>Gatsby has the concept of the <code class=\"language-text\">pageQuery</code>. For every page you create you can\nspecify a <code class=\"language-text\">pageQuery</code> that will pass data into the default export of that page.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/pages/index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogIndex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Handle graphql errors</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">BlogIndex render errr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Errors found: Check the console for details</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Some things I wrote</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>This is a simplified example, but there are a few things going on that might not\nbe intuitive.</p>\n<ul>\n<li>In the render method we first check for errors, and return early if any are\nfound</li>\n<li>If no error are found we render a link for each item in the array:\n<code class=\"language-text\">this.props.data.allMarkdownRemark.edges</code></li>\n<li>We export a <code class=\"language-text\">pageQuery</code> variable that is constructed using the magic <code class=\"language-text\">graphql</code>\nglobal</li>\n</ul>\n<p>The error handling is pretty straightforward, if a bit verbose, as long as you\nknow what GraphQL responses look like. In case you didn’t know, if you get an\nerror in a GraphQL query the response will contain the <code class=\"language-text\">errors</code> array. We check\nfor this array and handle it accordingly.</p>\n<p>Now let’s looks specifically at where we render a link for each blog post:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the data shape is exactly what we specified in the GraphQL query.\nThis may seem like a lot of nesting just to get at an array of data, but GraphQL\nemphasizes <em>clarity</em> over conciseness. You’ll notice that if you run your\nGraphQL query in GraphiQL the data will have the exact shape described above.</p>\n<p>And that brings us finally to the page query:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>This is how you get data from Gatsby into your react components. Make sure you\ndon’t misspell <code class=\"language-text\">pageQuery</code> otherwise you won’t get what you want.</p>\n<p>Also note that <code class=\"language-text\">graphql</code> is just some magic global variable. Your linter will\nprobably complain about it being undefined and you will just have to ignore it.\nPersonally I think it would be more clear if <code class=\"language-text\">graphql</code> was imported from Gatsby,\nbut the project is still young so the API could change at some point ¯\\<em>( ツ\n)</em>/¯</p>\n<h4>Linking to blog posts</h4>\n<blockquote>\n<p>But the links don’t link anywhere… where’s that <code class=\"language-text\">href</code>?</p>\n</blockquote>\n<p>Let’s remedy that. Import the <code class=\"language-text\">Link</code> component and swap it for the simple\n<code class=\"language-text\">&lt;a&gt;</code> tag that was in there before:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogIndex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Handle graphql errors</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">BlogIndex render errr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Errors found: Check the console for details</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Some things I wrote</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ??? */</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>But what does it link to? What is the URL of each blog post?</p>\n</blockquote>\n<p>That’s an open question because it depends on your data and how you structured\nit before. For example, if you included the intended URL in the frontmatter of\neach post it’s a simple matter of updating your query to include that:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            title\n            url # &lt;-------------  New!\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Many existing Gatsby examples use <code class=\"language-text\">path</code> within each markdown file’s frontmatter\nto designate the url. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: My Post\n<span class=\"token title important\">path: my-post\n<span class=\"token punctuation\">---</span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> My post</span></code></pre></div>\n<p>In this case <code class=\"language-text\">node.frontmatter.path</code> would be used to construct URLs. If this is\nthe case for you then you’re probably all set for the index page.</p>\n<blockquote>\n<p>But what if the URL for each post is <strong>NOT</strong> in the frontmatter?</p>\n</blockquote>\n<p>This was exactly my situation. The URL was actually derived from the title of\nthe post so I had to figure out how to augment the GraphQL fields with my own\ndata. Namely the URL of the post derived from the post title.</p>\n<h3>Adding custom data to the GraphQL schema</h3>\n<p>If I have a post named “Isn’t this a fun title” then I want the URL to be\n“isnt-this-a-fun-title”. Notice that spaces turn into hyphens and special\ncharacters are removed. This is simple enough to do in JavaScript, but it felt\nwrong to do it on the fly when rendering components. This is <em>data</em> so I wanted\nto be able to query it through GraphQL.</p>\n<p>Enter <code class=\"language-text\">setFieldsOnGraphQLNodeType</code>.</p>\n<p><strong>Aside:</strong> Gatsby is super extensible. It’s the primary reason I switched from\nHexo which worked well enough for my use case.</p>\n<p>In order to extend this particular part of Gatsby you need to create a\n<code class=\"language-text\">gatsby-node.js</code> file. This file let’s you work with all of Gatsby’s plugin\nhooks that are run in node. The GraphQL server is run in node, so this is where\nwe add custom fields. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gatsby-node.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gatsby/graphql\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getURL</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* See the source link below for implementation */</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setFieldsOnGraphQLNodeType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token function\">getURL</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Source code for\n<a href=\"https://github.com/iansinnott/iansinnott.github.io/blob/source/gatsby-node.js\">gatsby-node.js here</a>.</p>\n</blockquote>\n<p>If you’ve worked with GraphQL before this should look very familiar. In fact, as\nyou can see the string type is imported directly from GraphQL and not from\nGatsby.</p>\n<p>You check the type of node and if it’s a type you’re interested in you\nresolve with some fields. Fields in GraphQL require a <code class=\"language-text\">type</code> and a way to\n<code class=\"language-text\">resolve</code> the value.</p>\n<p>I’ve omitted the implementation of <code class=\"language-text\">getURL</code> here, but you can see the\n<a href=\"https://github.com/iansinnott/iansinnott.github.io/blob/gatsby-migration/gatsby-node.js#L17\">source code here</a>\n(NOTE: in the source it’s called <code class=\"language-text\">getSlug</code> instead of <code class=\"language-text\">getURL</code>).</p>\n<p>You can use this technique to add any field you want to your GraphQL schema. Now\nyou should be all set to render <code class=\"language-text\">Link</code> components that actually point somewhere\ninteresting 👍.</p>\n<h3>Generating pages from markdown files</h3>\n<p>This is where it all comes together. If you finished the last section you would\nhave ended up with a bunch of links that point to the correct URL but when you\ntried visiting the URL there was nothing there 😕. This is because Gatsby hasn’t\nyet generated an additional pages. It’s still just rendering whatever is in your\n<code class=\"language-text\">src/pages/</code> directory.</p>\n<p>By default, Gatsby will create a static HTML page for everything under\n<code class=\"language-text\">src/pages/</code>. At this point we’ve discussed <code class=\"language-text\">src/pages/index.js</code> extensively. It\nwill be the <code class=\"language-text\">index.html</code> page of your site, and thus your landing page.</p>\n<p>For any stand-alone pages, simply create a corresponding JavaScript file in the <code class=\"language-text\">pages/</code>\ndirectory and you are good to go. For example, <code class=\"language-text\">src/pages/about.js</code> would\ngenerate an <code class=\"language-text\">about.html</code> page. Simple.</p>\n<p>But almost everyone will want to generate some pages based on data, not on the\nfiles in the pages directory. Gatsby let’s us do this.</p>\n<h4>Generating custom pages</h4>\n<p>The key here is again to hook in to one of Gatsby’s many plugin hooks. In this\ncase, <code class=\"language-text\">createPages</code>. In the same <code class=\"language-text\">gatsby-node.js</code> file as before:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gatsby-node.js</span>\n\n<span class=\"token comment\">// .. other stuff from before...</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> boundActionCreators <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> boundActionCreators\n  <span class=\"token keyword\">const</span> postTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/templates/custom-page.js\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Create a custom page!</span>\n  <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/my-custom-page/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> postTemplate<span class=\"token punctuation\">,</span>\n    context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Context will be passed in to the page query as graphql variables</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At the most basic level this method of page creation is quite simple: Grab the\n<code class=\"language-text\">createPage</code> function from the API and call it with some props.</p>\n<ul>\n<li><code class=\"language-text\">path</code> is required. This is the path that your page will have as a generated\nHTML file. It’s the URL of your final page.</li>\n<li><code class=\"language-text\">component</code> is also required. It’s the file containing the react component\nthat will be used to render this particular page.</li>\n<li><code class=\"language-text\">context</code> is optional but I’ve included it here because it will be important\nsoon. This lets you pass data down to the react component specified in the\n<code class=\"language-text\">component</code> option as well as the <code class=\"language-text\">pageQuery</code> (if any).</li>\n</ul>\n<p>The API is actually pretty simple: To generate a new page call <code class=\"language-text\">createPage</code> with\nsome props. So in pseudo code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Get all markdown files</span>\n<span class=\"token comment\">// Call create page for each one</span>\nmarkdownFiles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token string\">\"./src/templates/post.js\"</span><span class=\"token punctuation\">,</span>\n    context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I’ve included the pseudo code to highlight the fact that nothing too magical is\ngoing on here. We just need to call create page for every post we want to\ncreate. The implementation is a bit more verbose, but that’s still all it’s\ndoing.</p>\n<p>So in order to make this work we also need to be able to query GraphQL just like\nwe do in the page query. Gatsby let’s us do exactly that by giving us access to\nthe <code class=\"language-text\">graphql</code> object and letting us return a promise so that we can do async\nwork.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// NOTE: I'm using async/await to simplify the code since it's now natively supported</span>\n<span class=\"token comment\">// in Node 8.x. This means that our function will return a promise</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> reporter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">const</span> postTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/templates/post.js\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Using async await. Query will likely be very similar to your pageQuery in index.js</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            id\n            url\n          }\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    reporter<span class=\"token punctuation\">.</span><span class=\"token function\">panicOnBuild</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error while running GraphQL query.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Create blog posts pages.</span>\n  result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> postTemplate<span class=\"token punctuation\">,</span>\n      context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Context will be passed in to the page query as graphql vars</span>\n        id<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the query is very similar to the <code class=\"language-text\">pageQuery</code> in index.js but it’s\nnot identical. This time we actually want the <code class=\"language-text\">id</code> because it will allow the\npost template to use the ID to query one single blog post.</p>\n<h3>Rendering individual posts</h3>\n<p>If you’ve made it to this point rendering individual posts is quite\nstraightforward. You need to:</p>\n<ul>\n<li>Create the <code class=\"language-text\">postTemplate</code> file referenced in <code class=\"language-text\">createPages</code> above</li>\n<li>Export your template component as the default export</li>\n<li>Add a <code class=\"language-text\">pageQuery</code> that will fetch the blog post to render</li>\n</ul>\n<p>Here it is in all it’s glory:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/templates/post.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdownRemark\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n          <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NOTE: The $id var is passed in via context when calling createPage in gatsby-node.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query PostById($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n      html\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>If you’re not used to GraphQL syntax the <code class=\"language-text\">pageQuery</code> might be a little\nintimidating, but it’s all standard GraphQL so if you take the time to learn\nGraphQL on its own you will be able to use that knowledge here. I.e. it is not\nGatsby-specific.</p>\n<p>The important thing to note here is that <code class=\"language-text\">$id</code> is passed in via <code class=\"language-text\">context</code> in\n<code class=\"language-text\">gatsby-node.js</code>. That’s how the post data and processed HTML string make their\nway into props. Then it’s just a matter of rendering as you would with any other\ncomponent.</p>\n<h3>Where to go from here</h3>\n<p>There’s a lot more you can do with Gatsby and it’s not always obvious how to\nproceed, but you have the full power of JavaScript at your disposal. So as long\nas you don’t mind reading a bit of source code to figure out how something works\nthere’s no limit to what you can implement.</p>\n<p>Here are some ideas:</p>\n<ul>\n<li>Add previous and next buttons to each post</li>\n<li>Create a remark plugin to add custom block types</li>\n<li>Aggregate tags from your frontmatter and generate pages for all posts of a\nspecific tag</li>\n</ul>\n<p>Some of these—such as pagination—are implemented on my blog. You can find the\nsource code here:</p>\n<p><a href=\"https://github.com/iansinnott/iansinnott.github.io/tree/gatsby-migration\">Source code for the blog</a></p>\n<h3>Closing thoughts</h3>\n<p>In my opinion Gatsby provides a few killer features:</p>\n<ul>\n<li>Extensible through a powerful plugin API.</li>\n<li>Supports arbitrary data sources that can be easily queried using GraphQL.</li>\n<li>Splits your code automatically so you don’t have to worry about bundle size\nincreasing as a function of the number of pages you render.</li>\n</ul>\n<p>It’s not a perfect project (looking at you global <code class=\"language-text\">graphql</code> object) and it’s\nstill under heavy development, so you may run in to bugs, but in my view the\npros heavily outweigh the cons. It’s a best-in-class static site generator and\nwell worth the adoption time if you want to customize your blog.</p>\n<hr>\n<p>If anything was unclear or you have more questions feel free to ask me on\n<a href=\"https://twitter.com/ian_sinn\">Twitter</a>.</p>","frontmatter":{"title":"Migrating My Blog From Hexo To Gatsby","date":"October 01, 2017","description":null}}},"pageContext":{"slug":"/docs/blog/2017-10-01-migrating-my-blog-from-hexo-to-gatsby/","previous":{"fields":{"slug":"/docs/blog/2017-09-26-embracing-graphql/"},"frontmatter":{"title":"Embracing GraphQL — How I migrated React FAQ to Gatsby v1"}},"next":{"fields":{"slug":"/docs/blog/2017-10-03-smartive-goes-gatsby/"},"frontmatter":{"title":"Why we choose Gatsby over Next.js and Wintersmith"}}}}}