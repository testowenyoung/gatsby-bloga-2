{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-07-02-extending-components/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"60c3ac32-3d85-5208-bda3-56057e000581","excerpt":"Component Shadowing\nprovides a powerful API for customizing the rendering of components\nand even entire pages. For example, changing the logo might involve…","html":"<p><a href=\"/gatsby-bloga-2/blog/2019-04-29-component-shadowing/\">Component Shadowing</a>\nprovides a powerful API for customizing the rendering of components\nand even entire pages. For example, changing the logo might involve\nshadowing that component by creating your custom implementation\nin a file named <code class=\"language-text\">src/gatsby-theme-blog/components/logo.js</code>. Now,\nwith recent improvements shipped to Gatsby core, you can <em>extend</em>\nany component or file in the <code class=\"language-text\">src</code> directory.</p>\n<p>This means that you can import the component you’re shadowing and\nthen render it. Consider a scenario where you have a custom Card\ncomponent that you want to wrap the author’s bio in.</p>\n<p>Before component extending was added this meant you had to copy over\nthe entire component implementation from the theme to wrap it with\nyour Card. It might look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/gatsby-theme-blog/components/author.js\"><pre class=\"language-jsx:title=src/gatsby-theme-blog/components/author.js\"><code class=\"language-jsx:title=src/gatsby-theme-blog/components/author.js\">import React from &quot;react&quot;\nimport { Avatar, MediaObject, Icon } from &quot;gatsby-theme-blog&quot;\nimport Card from &quot;../components/card&quot;\n\nexport default function Author({ name, bio, avatar, twitterUrl, githubUrl }) {\n  return (\n    &lt;Card&gt;\n      &lt;MediaObject&gt;\n        &lt;Avatar {...avatar} /&gt;\n        &lt;div&gt;\n          &lt;h3&gt;{name}&lt;/h3&gt;\n          &lt;p&gt;{bio}&lt;/p&gt;\n          &lt;a href={twitterUrl}&gt;\n            &lt;Icon name=&quot;twitter&quot; /&gt;\n          &lt;/a&gt;\n          &lt;a href={githubUrl}&gt;\n            &lt;Icon name=&quot;github&quot; /&gt;\n          &lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/MediaObject&gt;\n    &lt;/Card&gt;\n  )\n}</code></pre></div>\n<p>This workflow isn’t too bad, especially since the component is relatively\nstraightforward. However, it could be optimized in scenarios where\nyou want to wrap a component or pass a different prop without having\nto worry about the component’s internals.</p>\n<h2>Importing the Shadowed Component</h2>\n<p>In the above example it’d be preferable to be able to import the\nAuthor component and wrap it with your Card.</p>\n<p>Now, that component extending has been added you can do the\nfollowing instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/gatsby-theme-blog/components/author.js\"><pre class=\"language-jsx:title=src/gatsby-theme-blog/components/author.js\"><code class=\"language-jsx:title=src/gatsby-theme-blog/components/author.js\">import React from &quot;react&quot;\nimport { Author } from &quot;gatsby-theme-blog/src/components/author&quot;\nimport Card from &quot;../components/card&quot;\n\nexport default function Author(props) {\n  return (\n    &lt;Card&gt;\n      &lt;Author {...props} /&gt;\n    &lt;/Card&gt;\n  )\n}</code></pre></div>\n<p>This is a quick and efficient way to customize rendering\nwithout needing to worry about the implementation details of\nthe component you’re looking to customize. Extending the shadowed\ncomponent means you can use composition, leveraging a great feature\nfrom React.</p>\n<h2>Applying New Props</h2>\n<p>In some cases there could be a component with different variants\nwithout an API to modify it outside of shadowing. With component\nextending you can import that component and then add your new\nprop to change it.</p>\n<p>If <code class=\"language-text\">NewsletterButton</code> accepts a <code class=\"language-text\">variant</code> prop which changes the\nlook and colors of the button, you can use it when you extend\nthe component. Below, <code class=\"language-text\">NewsletterButton</code> is re-exported and\n<code class=\"language-text\">variant=&quot;link&quot;</code> is added in the shadowed file to override its\ndefault value.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\"><pre class=\"language-jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\"><code class=\"language-jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\">import { NewsletterButton } from &quot;gatsby-theme-blog/src/components/newsletter&quot;\n\nexport default function Button(props) {\n  return &lt;NewsletterButton {...props} variant=&quot;link&quot; /&gt;\n}</code></pre></div>\n<h2>Using the CSS Prop</h2>\n<p>In addition to passing a different prop to a component you’re extending,\nyou might want to apply CSS using the <a href=\"/gatsby-bloga-2/docs/emotion\">Emotion CSS prop</a>.\nThis will allow you to change the styling of a particular component without\nchanging any of its functionality.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\"><pre class=\"language-jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\"><code class=\"language-jsx:title=src/gatsby-theme-blog/components/newsletter/button.js\">import { NewsletterButton } from &quot;gatsby-theme-blog/src/components/newsletter&quot;\n\nexport default function Button(props) {\n  return (\n    &lt;NewsletterButton\n      css={{\n        backgroundColor: &quot;rebeccapurple&quot;,\n        color: &quot;white&quot;,\n        boxShadow: &quot;none&quot;,\n      }}\n      {...props}\n    /&gt;\n  )\n}</code></pre></div>\n<p><strong>Note:</strong> For this approach to work <code class=\"language-text\">NewsletterButton</code> has to accept a\n<code class=\"language-text\">className</code> property.</p>\n<h2>Change an Object</h2>\n<p>Another use case might be changing a <code class=\"language-text\">theme.js</code> file that a Gatsby\nTheme uses to set colors globally.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=src/gatsby-theme-blog/theme.js\"><pre class=\"language-js:title=src/gatsby-theme-blog/theme.js\"><code class=\"language-js:title=src/gatsby-theme-blog/theme.js\">import theme from &quot;gatsby-theme-blog/src/theme&quot;\n\nexport default { ...theme, primary: &quot;tomato&quot; }</code></pre></div>\n<p>This provides a nice interface to extend an object if you want to\nchange a couple values from the defaults.</p>\n<h2>Conclusion</h2>\n<p>If you need to make a small change to an existing component or\nadd an additional prop, extending the component via shadowing can\nbe an effective pattern.</p>","frontmatter":{"title":"Extending Shadowed Components","date":"July 02, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-07-02-extending-components/","previous":{"fields":{"slug":"/docs/blog/2019-06-28-component-driven-drupal-development/"},"frontmatter":{"title":"Mediacurrent - Maximizing the Potential of Component-Driven Drupal Development with Gatsby"}},"next":{"fields":{"slug":"/docs/blog/2019-07-03-using-themes-for-distributed-docs/"},"frontmatter":{"title":"Using Themes for Distributed Docs"}}}}}