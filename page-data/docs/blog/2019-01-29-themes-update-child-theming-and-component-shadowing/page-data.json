{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-01-29-themes-update-child-theming-and-component-shadowing/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"05bb51f7-b753-5952-b667-5c3e2fe323b9","excerpt":"Updated July 9, 2019 to reflect using the  package instead of the (now deprecated) gatsby-mdx package. If you aren’t familiar with Gatsby themes yet, then check…","html":"<blockquote>\n<p><em>Updated July 9, 2019 to reflect using the <code class=\"language-text\">gatsby-plugin-mdx</code> package instead of the (now deprecated) gatsby-mdx package.</em></p>\n</blockquote>\n<blockquote>\n<p>If you aren’t familiar with Gatsby themes yet, then check out <a href=\"/gatsby-bloga-2/blog/2018-11-11-introducing-gatsby-themes/\">Introducing\nGatsby\nThemes</a>\nfor a written introduction and <a href=\"https://www.youtube.com/watch?v=wX84vXBpMR8\">my Gatsby Days\ntalk</a> for a more audio/visual\napproach.</p>\n</blockquote>\n<h2>Child Theming</h2>\n<p>We’ve merged <a href=\"https://github.com/gatsbyjs/gatsby/pull/10787\">a PR</a> into Gatsby\ncore to support Child theming. Child theming is an extension of the core theming\nalgorithm to support a “parent/child” style relationship where child themes can\nrely on parent themes in the same way sites rely on themes. This means you can\nnow add a child theme using the <code class=\"language-text\">plugins</code> gatsby-config key in a theme as well as your\nsites.</p>\n<p>This change is being made to make it easier for theme authors to produce themes\nthat rely on complex behavior while enabling users who have different skill sets\nto consume and modify those themes. Theme authors will benefit from the ability\nto abstract logic, UI elements, and other Gatsby idioms into multiple packages\nwhich can be consumed as a single theme. Child themes (and themes as a whole)\nwill improve the ability of people with different skill sets to create\naccessible, performant, beautiful sites. A few that I had in mind while building\nout child theming are:</p>\n<ul>\n<li>A designer who wants to change a set of design tokens to create a whole new\nlook for a theme</li>\n<li>Someone who is more familiar with HTML and CSS than React and GraphQL and\nwants to create a set of child blog themes</li>\n<li>Someone familiar with GraphQL wants to enable new functionality by writing\ntheir own queries for page templates</li>\n</ul>\n<p>We also want child themes to enable an ecosystem to build on top of and compose\nwith each other. The 80% use case for a blog should be capable of being built on\na similar data model encapsulated in a parent theme so that users can swap out\nchild themes to try out new sites or new looks. This will take some more effort\nto achieve, so more on that at a later date.</p>\n<h3>A Concrete Example</h3>\n<p>Taking advantage of child theming requires some familiarity with theming itself\nto be used effectively. If you’re already experienced with themes and want to\nsee how one possible way to upgrade your themes to use this feature, the\ncorresponding PR in the <a href=\"https://github.com/ChristopherBiscardi/gatsby-theme-examples\">gatsby-theme-examples\nrepo</a> has <a href=\"https://github.com/ChristopherBiscardi/gatsby-theme-examples/pull/13\">also\nbeen\nmerged</a>.</p>\n<p>Let’s say you have a theme that contains a blog data model and some logic\nrelating to how to render blog posts at specific pages, we’ll call it\n<code class=\"language-text\">gatsby-theme-blog-core</code>. This theme renders JSON representations of blog posts\nat the relevant page locations instead of full UI because it’s only meant to\nencapsulate the data model. We’ll skip going over page creation logic in\n<code class=\"language-text\">gatsby-node.js</code> and instead focus on the following possible <code class=\"language-text\">gatsby-config.js</code>\nfor the core theme.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=gatsby-theme-blog-core/gatsby-config.js\"><pre class=\"language-js:title=gatsby-theme-blog-core/gatsby-config.js\"><code class=\"language-js:title=gatsby-theme-blog-core/gatsby-config.js\">module.exports = {\n  plugins: [`gatsby-plugin-mdx`],\n}</code></pre></div>\n<p>Then we have another theme that handles applying a UI layer using to the core\ndata model, <code class=\"language-text\">gatsby-theme-blog</code>. This theme is a child theme of\n<code class=\"language-text\">gatsby-theme-blog-core</code> and shadows the core theme’s modules to render\nbeautiful posts on each blog using any styling technology we want, like\n<a href=\"https://emotion.sh/\">Emotion</a> or <a href=\"https://sass-lang.com/\">Sass</a>. Again, since\nthis is a post on child theming itself we’ll skip looking at how shadowing is\napplied to the parent and focus on one possible child theme <code class=\"language-text\">gatsby-config.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=gatsby-theme-blog/gatsby-config.js\"><pre class=\"language-js:title=gatsby-theme-blog/gatsby-config.js\"><code class=\"language-js:title=gatsby-theme-blog/gatsby-config.js\">module.exports = {\n  plugins: [`gatsby-theme-blog-core`, `gatsby-plugin-emotion`],\n}</code></pre></div>\n<p>Now that we’ve composed the original data model (with page creation logic) with\nthe plugins and shadowed components to build the UI, any user can use our theme\nby specifying only the child in their <code class=\"language-text\">gatsby-config.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=my-site/gatsby-config.js\"><pre class=\"language-js:title=my-site/gatsby-config.js\"><code class=\"language-js:title=my-site/gatsby-config.js\">module.exports = {\n  plugins: [`gatsby-theme-blog`],\n}</code></pre></div>\n<p>The end result from a theme’s composition view is that we apply the parent, then\nthe child, then the user’s site. This opens up a whole host of additional\npossibilities as child themes can have multiple parents or compose with each\nother. Data models for blogging and e-commerce can be combined into a usable\nchild theme and distributed as a single npm package. Users don’t need to know\nyour theme is made up of multiple parents.</p>\n<p>If we go back to our list of use cases, we can map each of them to a layer in\nthis theme stack. The designer uses the child theme to make their own site\n(passing tokens into the theme config), the person proficient in HTML and CSS\ncan shadow components from the core theme (using minimal React), and the Gatsby\nexpert can craft custom data models for their specific use cases to compose with\nother models. Each link in the chain supports the next, allowing us to reveal\ncomplexity for people with different skillsets when they need it and not before.</p>\n<h3>Component Shadowing</h3>\n<p>The other major change that has landed is the only breaking change to themes so\nfar. Based on feedback from the early adopters who have been authoring themes,\nwe’ve changed Component Shadowing so that it now applies to the entire <code class=\"language-text\">src/</code>\ndirectory instead of just the <code class=\"language-text\">src/components</code> directory. This change was made\nbecause of two key points of feedback:</p>\n<ol>\n<li>people had trouble remembering which folders got shadowed</li>\n<li>people who did remember, also wanted shadowing on templates and other, new\ndirectories (for example one for design tokens) that didn’t belong in\ncomponents</li>\n</ol>\n<p>The fix for any currently existing theme users is to move any shadowed\ncomponents from <code class=\"language-text\">src/components/&lt;theme-name&gt;</code> to <code class=\"language-text\">src/&lt;theme-name&gt;/components</code>.</p>\n<h3>What’s next?</h3>\n<p>We are working on a roadmap post for themes which will give more insight into\nthe future of theming, how we’re approaching stability, and what we’re working\non next. Check back on the Gatsby blog to know when that is published.</p>","frontmatter":{"title":"Themes Update: Child Theming and Component Shadowing","date":"January 29, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-01-29-themes-update-child-theming-and-component-shadowing/","previous":{"fields":{"slug":"/docs/blog/2019-01-28-building-a-large-ecommerce-website-with-gatsby-at-daniel-wellington/"},"frontmatter":{"title":"Building a large, internationalized e-commerce website with Gatsby at Daniel Wellington"}},"next":{"fields":{"slug":"/docs/blog/2019-01-30-flamingo-case-study/"},"frontmatter":{"title":"Flamingo, women’s body care brand from Harry’s, chooses Gatsby for critical e-commerce launch, 5X faster page loads"}}}}}