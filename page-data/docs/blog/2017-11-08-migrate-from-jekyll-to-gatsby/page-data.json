{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2017-11-08-migrate-from-jekyll-to-gatsby/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"a3daa142-d982-5dbf-b728-f6720cd51e11","excerpt":"A bit of history Some years ago I created my blog with\nJekyll and it has been working well ever since. I have never been a huge fan of Ruby, but because of…","html":"<h2>A bit of history</h2>\n<p>Some years ago I created my <a href=\"https://blog.singuerinc.com/\">blog</a> with\n<a href=\"https://jekyllrb.com/\">Jekyll</a> and it has been working well ever since.</p>\n<p>I have never been a huge fan of Ruby, but because of requirements or convenience\nI’ve built apps with it (Rails / Sinatra / Jekyll / etc).</p>\n<p>I used to like Jekyll because I could write my posts in Markdown which is super\neasy to write and edit.. When I started my blog, I took a theme called\n<a href=\"https://github.com/poole/lanyon\">Lanyon</a> and tweaked it a bit. That was\nenough for me.</p>\n<p>But recently I find that I only install Ruby and Jekyll to manage my blog (I\nmostly develop with Node). I tried to develop my blog inside a Docker container,\nbut this was extremely slow.</p>\n<p>Some weeks ago, one of my colleagues at work told me about\n<a href=\"/gatsby-bloga-2/\">Gatsby</a> Since I was already learning\n<a href=\"https://reactjs.org/\">React</a> and had started looking at\n<a href=\"https://graphql.org/\">GraphQL</a> (after attending a talk at\n<a href=\"http://nordicjs.com/\">Nordic.js</a>)—I was very interested in giving it a try.</p>\n<h2>Migrating from Jekyll to Gatsby</h2>\n<p><img src=\"/gatsby-bloga-2/0db46dbbfb297a5f832ea30d8a4f0b4c/gatsby.svg\" alt=\"Migrating from Jekyll to Gatsby\"></p>\n<h3>Data</h3>\n<p>One of the biggest concern about migrating from one generator to another is how\nyou move the data. In my case, I have around 45 posts so it is not a big deal to\nconvert from one type to another, but still manual work that I wanted to avoid.</p>\n<p>Luckily Gatsby works with Markdown and it can take the data from your YAML front\nmatter block, so you don’t have to change anything. You just need to install\n<code class=\"language-text\">gatsby-transformer-remark</code> plugin.</p>\n<p>Then, in your <code class=\"language-text\">gatsby-config.js</code> file add:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"gatsby-transformer-remark\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Theme</h3>\n<p>My blog is clean and simple, I don’t need too much CSS. Instead of bloating my\nblog with a theme I added <a href=\"http://tachyons.io/\">Tachyons</a>. I managed to\nreplicate 99% of my previous theme with classes from Tachyons. Something that I\nwould like to do better is to remove the parts of Tachyons that I’m not using.</p>\n<p><a href=\"https://github.com/singuerinc/blog/blob/master/src/layouts/index.css\">My current CSS file</a> has less than 30 lines. The rest of the layout is created\nwith tachyons classes.</p>\n<h3>Slug + Date</h3>\n<p>This was the only “tricky” part, since I wanted to preserve the same page names\nin order to make a 1:1 transition. This was not possible with the default\nbehavior from Gatsby. I don’t have a <code class=\"language-text\">date</code> field in my front matter block, so I\nneed to extract the date from the file name.</p>\n<p>The slug in my case is generated with this (default in Jekyll) structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://blog.singuerinc.com/[n-categories]/YYYY/MM/DD/dashed-title/\n\n// Given this data:\ncategories:\n  - app\n  - macos\n  - vuejs\n  - electron\n\nfilename: 2017-05-09-introducing-tomeito.md\n\n// I would like to get:\n/app/macos/vuejs/electron/2017/05/09/introducing-tomeito/</code></pre></div>\n<p>How did I create it? Inside my <code class=\"language-text\">gatsby-node.js</code> I used the <code class=\"language-text\">onCreateNode</code>\nextension API to tweak the slug:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode<span class=\"token punctuation\">,</span> boundActionCreators <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> boundActionCreators\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MarkdownRemark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> categories <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>frontmatter\n\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> <span class=\"token function\">createFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode<span class=\"token punctuation\">,</span> basePath<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pages</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// get the date and title from the file name</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n      <span class=\"token regex\">/^\\/([\\d]{4}-[\\d]{2}-[\\d]{2})-{1}(.+)\\/$/</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// create a new slug concatenating everything</span>\n    <span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>\n      categories<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span>\n\n    <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slug</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> slug <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// save the date for later use</span>\n    <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">date</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> date <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Deploy</h3>\n<p>I used to deploy to <a href=\"https://about.gitlab.com/features/pages/\">GitLab Pages</a>,\nbut I noticed that from time to time it’d go down, so I’m now testing\n<a href=\"https://www.netlify.com/\">Netlify</a> which has almost the same CI workflow:</p>\n<p><img src=\"/gatsby-bloga-2/63a4ed26d38ebe2499a1703049c711c9/diagram-ci.svg\" alt=\"Migrating from Jekyll to Gatsby\"></p>\n<h2>Conclusions</h2>\n<p>Some key points:</p>\n<ul>\n<li>Node instead of Ruby</li>\n<li>Much faster development workflow e.g. hot reload out of the box</li>\n<li>I can query the data I need and transform it before using it. (I’m looking\ninto the <a href=\"/gatsby-bloga-2/packages/gatsby-plugin-feed/\"><code class=\"language-text\">gatsby-plugin-feed</code></a> to recreate the\nAtom Feed)</li>\n<li>React and GraphQL for free with Gatsby</li>\n<li>Since I am confident with the Node ecosystem I’m able to contribute: <a href=\"https://github.com/gatsbyjs/gatsby/pull/2569\">First\npull request to Gatsby</a></li>\n<li>Netlify vs GitLab Pages (hopefully 100% uptime)</li>\n</ul>\n<h2>Final thoughts</h2>\n<p>Although the blog is the same, in content and look, the way that is created has\ncompletely changed. For me it is a whole new experience—easier, and faster.</p>\n<p>I wanted to move the blog to Node a long time ago and it is finally there!</p>\n<p>Next is to convert <a href=\"https://www.singuerinc.com/\">my portfolio</a> (also built with Jekyll).</p>\n<h2>Show me the code</h2>\n<p>If you want to take a look at <a href=\"https://github.com/singuerinc/blog\">the code</a> you can do it, it is published in GitHub.</p>","frontmatter":{"title":"Migrate from Jekyll to Gatsby","date":"November 08, 2017","description":null}}},"pageContext":{"slug":"/docs/blog/2017-11-08-migrate-from-jekyll-to-gatsby/","previous":{"fields":{"slug":"/docs/blog/2017-11-06-migrate-hugo-gatsby/"},"frontmatter":{"title":"Migrate from Hugo to Gatsby"}},"next":{"fields":{"slug":"/docs/blog/2017-11-09-why-i-created-my-blog-with-gatsby-and-contentful/"},"frontmatter":{"title":"Why I created my blog with Gatsby and Contentful"}}}}}