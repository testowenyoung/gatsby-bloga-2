{"componentChunkName":"component---src-templates-blog-post-js","path":"/docs/blog/2019-07-03-announcing-stable-release-gatsby-themes/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"bb497503-c351-5a64-a36a-b4abc5e1fda5","excerpt":"What are Gatsby themes? Using a Gatsby theme, all of your default configuration (shared functionality, data sourcing, design) is abstracted out of your site…","html":"<h2>What are Gatsby themes?</h2>\n<p>Using a Gatsby theme, all of your default configuration (shared functionality, data sourcing, design) is abstracted out of your site, and into an installable package.</p>\n<p>This means that the configuration and functionality isn’t directly written into your project, but rather versioned, centrally managed, and installed as a dependency. You can seamlessly update a theme, compose themes together, and even swap out one compatible theme for another.</p>\n<h2>What is “stable”?</h2>\n<p>The core theme APIs have been stable for a long time under the <code class=\"language-text\">__experimentalThemes</code> flag in <code class=\"language-text\">gatsby-config.js</code>. Since they’re being used in production by a number of different companies to great effect, we’re promoting these APIs, specifically composition and shadowing, to stable within Gatsby core so that people can take advantage of them with confidence.</p>\n<h2>A brief review of composition</h2>\n<p><code class=\"language-text\">gatsby-config</code> composition is the core abstraction behind how themes work. It means that you can write a <code class=\"language-text\">gatsby-config</code> in your plugin and it will be combined with any other plugin’s <code class=\"language-text\">gatsby-config</code> and the site’s <code class=\"language-text\">gatsby-config</code>. This results in a single combined <code class=\"language-text\">gatsby-config</code> that is then used to build your Gatsby project.</p>\n<p>Stability for composition means that any plugin can now take advantage of adding configuration, plugins, and metadata via a <code class=\"language-text\">gatsby-config</code>. The <code class=\"language-text\">gatsby-config</code> in any plugin can be an object, similar to the way any Gatsby project works today, or a function whose argument is the options specified by a user.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=my-plugin/gatsby-config.js\"><pre class=\"language-js:title=my-plugin/gatsby-config.js\"><code class=\"language-js:title=my-plugin/gatsby-config.js\">module.exports = options =&gt; {\n  return {\n    plugins: [],\n  }\n}</code></pre></div>\n<p>These options can be used to conditionally add plugins, mappings, or anything else you can do in a <code class=\"language-text\">gatsby-config.js</code>.</p>\n<h2>A brief review of shadowing</h2>\n<p>Shadowing allows you to override specific components by creating a new file and exporting a component from that file. If the theme you’re using has a <code class=\"language-text\">Header</code> component at <code class=\"language-text\">my-theme/src/components/header.js</code> then you can replace the component in your own site by creating a new file at <code class=\"language-text\">my-site/src/my-theme/components/header.js</code>.</p>\n<p>Stability for shadowing means that creating a single file is all you need to start changing how your theme renders your site. Additionally, we’ve added the ability to import and extend the parent component, allowing the use of props for customizing features of any React component.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=my-site/src/my-theme/components/header.js\"><pre class=\"language-jsx:title=my-site/src/my-theme/components/header.js\"><code class=\"language-jsx:title=my-site/src/my-theme/components/header.js\">import Header from &quot;my-theme/src/components/header&quot;\n\nexport default function MyHeader(props) {\n  return &lt;Header {...props} myProp={true} /&gt;\n}</code></pre></div>\n<h2>What is different?</h2>\n<p>The best API is no API, so we’re getting rid of the <code class=\"language-text\">__experimentalThemes</code> key in <code class=\"language-text\">gatsby-config.js</code> and enabling any plugin to participate in composition or shadowing. Themes are now “part of how Gatsby works” instead of being a separate API. It looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby-theme-blog\"</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>note: <code class=\"language-text\">__experimentalThemes</code> is deprecated and we didn’t remove it yet to allow time to migrate. Importantly there can be no <code class=\"language-text\">__experimentalThemes</code> usage if you want to use the new stable APIs in plugins. Migration is as easy as moving the theme declarations from <code class=\"language-text\">__experimentalThemes</code> to <code class=\"language-text\">plugins</code>.</p>\n<h2>What else is there?</h2>\n<p>Over the course of the experimental life of themes we were often asked what themes are best to use. Until now we didn’t have any officially supported themes to recommend. That changes today with the initial launch of two official themes: <code class=\"language-text\">gatsby-theme-blog</code> and <code class=\"language-text\">gatsby-theme-notes</code>.</p>\n<p>The official themes are built with an opinionated approach that we’ve abstracted into a library called Theme UI. Theme UI encapsulates some of the best practices we’ve discovered while working on themes over the last few months and we hope you’ll find it useful when building your own themes as well as working with the official themes.</p>\n<p><a href=\"/gatsby-bloga-2/blog/2019-07-03-customizing-styles-in-gatsby-themes-with-theme-ui/\">Read more</a> about how to take advantage of the official themes and Theme UI.</p>\n<h2>What’s next?</h2>\n<p>In the future we’ll work to make these features more accessible through tooling. Shadowing in particular is one area in which we are already experimenting with Gatsby CLI and GUI additions to display and eject shadowable components. While today you will have to rely on a theme’s documentation, this additional tooling will make it easier to work with unfamiliar themes in the future.</p>\n<p><a href=\"https://www.gatsbyjs.org/docs/themes/\">Check out the docs</a> to get started!</p>","frontmatter":{"title":"Announcing the Stable Release of Gatsby Themes!","date":"July 03, 2019","description":null}}},"pageContext":{"slug":"/docs/blog/2019-07-03-announcing-stable-release-gatsby-themes/","previous":{"fields":{"slug":"/docs/blog/2019-07-03-customizing-styles-in-gatsby-themes-with-theme-ui/"},"frontmatter":{"title":"Customizing Styles in Gatsby Themes with Theme UI"}},"next":{"fields":{"slug":"/docs/blog/2019-07-09-digital-display-drupal-gatsby/"},"frontmatter":{"title":"Digital Display With Decoupled Drupal 8 & Gatsby"}}}}}